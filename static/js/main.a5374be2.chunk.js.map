{"version":3,"sources":["data/maps.yml","data/transmissions.yml","data/transmissions_coord.yml","data/i18n.yml","data/other_diseases_stats.yml","utils/strings.js","utils/utils.js","components/Map.js","utils/map_text.js","utils/plot_types.js","components/MapNavBar.js","components/DateSlider.js","components/AnimationController.js","components/MainCounts.js","components/PlotSelector.js","components/RadioButton.js","components/PlotNavBar.js","components/LinePlot.js","components/StreamPlot.js","components/BumpPlot.js","utils/plot_data.js","components/Plot.js","components/BubblePlot.js","components/RawTable.js","components/Table.js","components/Tree.js","components/NavBar.js","covid19.svg","components/Loading.js","components/Footer.js","components/RegionDropdown.js","components/RegionSelectOption.js","components/Region.js","components/TransmissionNetwork.js","components/App.js","serviceWorker.js","index.js","data/us_map.yml"],"names":["module","exports","WORLD_MAP","CHINA_MAP1","CHINA_MAP2","US_MAP","GLOBAL_ZH","MAINLAND_CHINA_ZH","HONGKONG_ZH","MACAO_ZH","TAIWAN_ZH","ITALY_ZH","US_ZH","US_EN","UK_EN","PHILIPPINES_ZH","INTL_CONVEYANCE_EN","parseDate","date","substr","split","year","month","day","Date","nextDay","startDate","endDate","newDay","addDays","format","previousDay","subDays","formatDate","lang","i18n","DATE_FORMAT_2","isoDate","d","getTime","getTimezoneOffset","toISOString","metricText","confirmedCount","CONFIRMED","deadCount","DEATHS","curedCount","RECOVERED","fatalityRate","FATALITY_RATE","recoveryRate","RECOVERY_RATE","getDataFromRegion","data","region","reduce","s","x","simplifyName","name","simplified","trim","replace","updateDarkMode","isDarkMode","document","body","style","background","classList","add","remove","generateTreeData","obj","childrenLabel","sortBy","rootRegion","str","moreCounts","preDate","Object","entries","filter","k","includes","map","v","currentRegion","newdata","displayName","ENGLISH","keys","length","NaN","preConfirmedCount","preDeadCount","active","newConfirmed","newDead","sort","a","b","isNaN","Map","state","loaded","cursor","clicked","showTransmissions","usState","handleGeographyClick","props","regionToggle","onZoomEnd","event","handleMapZoomChange","zoom","getConfig","config","defaultConfig","parseInt","getColorScale","isUsState","scale","metric","darkMode","currentMap","maps","currentScale","scaleLinear","scaleLog","maxCount","stateData","slice","Math","max","county","values","mapScale","domain","clamp","colorConvert","colorScale","scaleSequential","greyedColor","TinyColor","interpolateMagma","desaturate","getLuminance","darken","setAlpha","toRgbString","lighten","color","getStrokeColor","counts","tinyColor","isDark","invert","prevProps","prevState","this","setState","setTimeout","tooltipRebuild","mapZoom","lang_map","us_map","center","parseFloat","projection","cruiseData","cruiseCounts","cruiseStrokeColor","greyStrokeColor","className","defaultChecked","onChange","icons","TRANSMISSIONS","projectionConfig","rotate","parallels","id","height","width","stroke","strokeWidth","orientation","onMoveStart","e","m","y","onMoveEnd","abs","onTouchStart","isMobile","isIPad13","minZoom","maxZoom","disableZooming","disablePanning","geography","onMouseEnter","geographies","geo","properties","REGION","backgroundMap","name_key","CHINESE_NAME","key","rsmKey","data-tip","default","fill","hover","pressed","onClick","filename","i","isCurrentRegion","zh","parent_key","isParentRegion","strokeColor","opacity","transmissions","trans","from","coord","c","to","strokeLinecap","pointerEvents","coordinates","strokeLinejoin","transform","cx","cy","r","size","visibility","Component","mapText","WORLD","title","regionName","flagCode","continent","CHN1","ASIA","CHN2","IRN","IRAN_MAP","EUROPE","ITA","ITALY_MAP","ITA2","ITALY_MAP2","ESP","SPAIN_MAP","DEU","GERMANY_MAP","FRA","FRANCE_MAP","US","NORTH_AMERICA","US2","US_MAP2","KOR","KOREA_MAP","CHE","SWITZERLAND_MAP","GBR","UK_MAP","NLD","NETHERLANDS_MAP","BEL","BELGIUM_MAP","IND","INDIA_MAP","JPN","JAPAN_MAP","PAK","PAKISTAN_MAP","MYS","MALAYSIA_MAP","PHL","PHILIPPINES_MAP","SAU","SAUDI_ARABIA_MAP","IDN","INDONESIA_MAP","THA","THAILAND_MAP","AUT","AUSTRIA_MAP","PRT","PORTUGAL_MAP","NOR","NORWAY_MAP","AUS","AUSTRALIA_MAP","OCEANIA","CAN","CANADA_MAP","SWE","SWEDEN_MAP","RUS","RUSSIA_MAP","IRL","IRELAND_MAP","CZE","CZECHIA_MAP","ROU","ROMANIA_MAP","POL","POLAND_MAP","BRA","BRAZIL_MAP","SOUTH_AMERICA","CHL","CHILE_MAP","MEX","MEXICO_MAP","ECU","ECUADOR_MAP","PER","PERU_MAP","COL","COLOMBIA_MAP","ARG","ARGENTINA_MAP","ZAF","SOUTH_AFRICA_MAP","AFRICA","HKG","HONGKONG_MAP","TRANSMISSION","TRANSMISSION_NETWORK","integerFormat","absIntegerFormat","streamTimeFormat","idx","interval","dates","fatalityTooltip","yLabel","xLabel","point","years","yFormatted","xFormatted","regionLegends","anchor","direction","translateX","itemWidth","itemHeight","itemTextColor","symbolSize","symbolShape","getSpecificPlotType","plotType","plotDetails","specificType","stats","diseaseComparison","fatalityLine","shifted","plotTypes","plot_basic","subregions","metricChange","statsChange","scaleChange","movingAverage","text","CASES","plot_fatality_recovery","FATALITY_RECOVERY_RATE","plot_growth","GROWTH_RATE","plot_one_vs_rest","ONE_VS_REST","plot_fatality_line","FATALITY_LINE","plot_doubling_time","CASE_DOUBLING_TIME","plot_r0","ESTIMATED_RO","plot_ranking","MOST_AFFECTED_SUBREGIONS","plot_subregion_basic","SUBREGION","plot_subregion_shifted","SUBREGION_SHIFTED","plot_subregion_stream","SUBREGION_STREAM","plot_subregion_active_stream","SUBREGION_ACTIVE_STREAM","plot_subregion_fatality","SUBREGION_FATALITY","plotSpecificTypes","total","type","yAxisFormat","xAxisFormat","PLOT_DATE_FORMAT","yFormat","log","legendItemWidth","new","fatality_recovery","growth_total","yScale","min","growth_new","one_vs_rest","one_vs_rest_new","fatality_line","xFormat","xScale","legends","hideMarkers","pointSize","xTickValues","Array","yTickValues","xTickRotation","xLegend","INFECTION_NUMBER","yLegend","enablePointLabel","enableSlices","pointLabel","tooltip","fatality_line2","DEATH_NUMBER","repeat","fatality_line_only","fatality_line2_only","doubling_time","CASE_DOUBLING_TIME_IN_DAYS","DAYS","r0","ESTIMATED_RO_SEIR","most_affected_subregions","serie","fullId","count","most_affected_subregions_new","subregion_total","margin","right","bottom","display","justifyContent","alignItems","backgroundColor","marginRight","serieId","subregion_new","subregion_total_stream","subregion_new_stream","subregion_active_stream","subregion_fatality","xLog","left","pointBorderWidth","yLegendOffset","pointLabelYOffset","subregion_fatality2","subregion_fatality_only","subregion_fatality2_only","subregion_total_shifted_100","DAYS_AFTER_100_CASES","DAY_0","subregion_new_shifted_100","subregion_total_shifted_10","DAYS_AFTER_10_CASES","subregion_new_shifted_10","MapNavBar","dropdownOpen","updateHeight","window","innerHeight","documentElement","clientHeight","mapToggle","metricToggle","newMetric","target","getAttribute","addEventListener","removeEventListener","fullPlot","fullTree","value","UncontrolledDropdown","DropdownToggle","tag","data-toggle","aria-expanded","DropdownMenu","modifiers","setMaxHeight","enabled","order","fn","styles","overflowY","maxHeight","DropdownItem","divider","header","DateSlider","handleDateChange","handleTempDateChange","fullMap","plotDates","numberOfDays","dateTicksInterval","round","dateTicks","scaleTime","ticks","timeDay","mode","step","time","onUpdate","getRailProps","handles","getHandleProps","handle","index","percent","role","aria-valuemin","aria-valuemax","aria-valuenow","tracks","getTrackProps","source","tick","marginLeft","ms","DATE_FORMAT_1","formatTick","AminationController","animationLoop","playing","dateForward","dateBackward","startAnimation","playingToggle","stopAnimation","forceUpdate","MainCounts","preCount","diff","toLocaleString","NEWCASE","PlotSelector","currentPlotType","onPlotTypeChange","plotParameters","currentRegionIsGlobal","hasSubregions","OVERALL","SUBREGIONS","RadioButton","texts","selected","onSelect","alwaysShow","disabled","ButtonGroup","Button","PlotNavBar","plotSpecificType","scaleToggle","TYPE","cumulative","CUMULATIVE","daily","DAILY","Y_AXIS","rate","RATE","deaths","DEATH_NUMBER2","COMPARISONS","show","SHOW","hide","HIDE","10","TEN_CASES","100","HUNDRED_CASES","SCALE","linear","LINEAR_SCALE","LOG_SCALE","expand","PERCENT","silhouette","CASE_NUMBERS","stream","MOVING_AVERAGE","THREE_DAYS","FIVE_DAYS","LinePlot","tempDate","plotDataAll","tickValues","plotTheme","top","theme","animate","plotData","colors","logTickMin","logTickMax","precision","useUTC","axisLeft","orient","tickSize","legend","legendOffset","legendPosition","axisBottom","tickRotation","enableGridX","gridYValues","pointBorderColor","useMesh","enableArea","curve","markers","axis","lineStyle","strokeDasharray","justify","translateY","itemsSpacing","itemDirection","itemOpacity","symbolBorderColor","effects","noClick","StreamPlot","offsetType","plotKeys","reverse","axisTop","axisRight","tickPadding","n","fillOpacity","enableGridY","isInteractive","enableStackTooltip","tooltipFormat","BumpPlot","lineWidth","activeLineWidth","inactiveLineWidth","inactiveOpacity","activePointSize","inactivePointSize","activePointBorderWidth","metricColors","metricColorsDark","generatePlotDataTotal","fullData","maxValue","minValue","calcMovingAverage","applyDateRange","getTickValues","generatePlotDataNew","params","convertTotalToNew","generatePlotDataGrowthRate","forEach","metricData","generatePlotDataOneVsRest","currentData","parentRegion","parentData","parentCounts","parentRegionName","parentPlotData","REST","currentPlotData","push","generatePlotDataSubregionRankings","getCurrentData","getSubregions","regionIndices","Set","regionSkipped","regionCounts","generatePlotDataSubregionStream","numOfRegions","subregionsData","OTHERS","subregionCounts","remainingConfirmed","otherConfirmedCount","otherDeadCount","otherCuredCount","confirmedCountPrevious","deadCountPrevious","curedCountPrevious","otherCount","generatePlotDataFatalityLine","cfr","diseases","generatePlotDataSubregionFatality","getLogTickValues","generatePlotDataSubregion","generatePlotDataSubregionShifted","firstIdx","findIndex","days","newY","p","topN","aCounts","bCounts","floor","log10","ceil","generatePlotDataFunc","confirmedCounts","fullMode","fontFamily","fontSize","textColor","grid","line","container","Plot","updateHight","vh","vw","clientWidth","innerWidth","setSpecificPlotType","handlePlotTypeChange","fullPlotToggle","fullDimensions","isDataEmpty","FullScreenIcon","AiOutlineFullscreenExit","AiOutlineFullscreen","plotProps","NO_DATA","PLOT_SETTINGS","BubblePlot","currentNodePath","handleNodeClick","node","path","bringTextsToTop","querySelectorAll","elem","parentElem","parentNode","appendChild","children","join","displayNodePath","ref","bubble","root","identity","padding","enableLabel","label","labelTextColor","labelSkipRadius","motionStiffness","motionDamping","defs","rotation","spacing","match","textFilter","rows","ids","filterValue","some","String","toLowerCase","flatten","flatRows","treeToFlat","subRows","pre","cur","depth","xFlat","RawTable","placeholderText","columns","initialState","onRowClick","filterPlaceholder","useTable","defaultColumn","Filter","column","setFilter","preFilteredRows","undefined","placeholder","getResetExpandedDeps","useFilters","useSortBy","useExpanded","getTableProps","getTableBodyProps","headerGroups","prepareRow","headers","render","headerGroup","getHeaderGroupProps","j","getHeaderProps","getSortByToggleProps","row","original","getRowProps","cells","cell","cellIdx","getCellProps","Table","highlightCurrentRegion","getElementById","tbodyElem","querySelector","bounding","getBoundingClientRect","tableBounding","scrollTop","offsetTop","getInitialSate","tableData","indices","regionData","isArray","newIdx","expanded","nextProps","Header","getToggleAllRowsExpandedProps","isAllRowsExpanded","Cell","canExpand","getToggleRowExpandedProps","paddingLeft","isExpanded","accessor","ACTIVE","NEW_CONFIRMED","NEW_DEATHS","toFixed","sortType","SEARCH","Tree","fullTreeToggle","BUBBLES","table","TABLE","NavBar","langText","scaleText","en","darkModeText","DARK","setTexts","LANGUAGE","LIGHT","onScaleChange","newScale","languageToggle","LANGUAGE_HELP_TEXT","darkModeToggle","LIGHT_MODE_HELP_TEXT","DARK_MODE_HELP_TEXT","onMouseLeave","LOG_SCALE_HELP_TEXT","LINEAR_SCALE_HELP_TEXT","RESET_HELP_TEXT","reset","RESET","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","createElement","_ref","svgRef","viewBox","ForwardRef","forwardRef","Loading","RegionDropdown","isOpen","onClose","position","RegionSelectOption","selectStyles","control","provided","minWidth","marginBottom","borderRadius","menu","boxShadow","option","textAlign","isFocused","isSelected","selectStylesDark","Region","options","countryOnly","toggleOpen","toggleCountryOnly","ReactTooltip","regionSelectMore","onSelectChange","generateOptions","englishRoot","regionList","childData","showSubRegions","displayRegionName","englishRegion","displayDate","showTooltip","offsetWidth","scrollWidth","rebuild","MoreIcon","GoUnfold","GoFold","data-tip-disable","data-place","classNamePrefix","autoFocus","backspaceRemovesValue","components","DropdownIndicator","onMouseUp","onTouchEnd","MORE_REGIONS_HELP_TEXT","LESS_REGIONS_HELP_TEXT","IndicatorSeparator","controlShouldRenderValue","hideSelectedOptions","isClearable","menuIsOpen","tabSelectsValue","noOptionsMessage","NO_RESULT","CountryNode","highlighted","labelFontSize","TransmissionNetwork","getRegion","getCount","getColor","getScale","getDisplayName","mapDimensions","networkConfig","directed","automaticRearrangeAfterDropNode","panAndZoom","focusAnimationDuration","nodeHighlightBehavior","highlightOpacity","d3","gravity","linkLength","link","highlightColor","mouseCursor","labelProperty","viewGenerator","nodes","links","onClickNode","defaultState","App","dataLoaded","fetchData","fetch","then","res","json","latest","pop","updateFullDimensions","newMap","newRegion","mapChange","find","fullMapToggle","newZoom","newDate","newDates","newDateStrings","newType","fullScreenMode","COVID19","Container","Row","Col","lg","letterSpacing","bounds","onResize","contentRect","measureRef","flexDirection","html","Boolean","location","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5374be2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/maps.99715425.yml\";","module.exports = __webpack_public_path__ + \"static/media/transmissions.8de85df3.yml\";","module.exports = __webpack_public_path__ + \"static/media/transmissions_coord.d68bd57b.yml\";","module.exports = __webpack_public_path__ + \"static/media/i18n.2dc5d962.yml\";","module.exports = __webpack_public_path__ + \"static/media/other_diseases_stats.e9a44273.yml\";","export const WORLD_MAP = 'WORLD'\r\nexport const CHINA_MAP1 = 'CHN1'\r\nexport const CHINA_MAP2 = 'CHN2'\r\nexport const HONGKONG_MAP = 'HKG'\r\nexport const US_MAP = 'US'\r\nexport const US_MAP2 = 'US2'\r\nexport const ITALY_MAP = 'ITA'\r\nexport const ITALY_MAP2 = 'ITA2'\r\nexport const EUROPE_MAP = 'EUROPE'\r\nexport const JAPAN_MAP = 'JPN'\r\nexport const TRANSMISSION = 'TRANSMISSION'\r\nexport const GLOBAL_EN = 'Global'\r\nexport const GLOBAL_ZH = '全球'\r\nexport const CHINA_EN = 'China'\r\nexport const CHINA_ZH = '中国'\r\nexport const MAINLAND_CHINA_EN = 'Mainland China'\r\nexport const MAINLAND_CHINA_ZH = '中国大陆'\r\nexport const HONGKONG_ZH = '香港'\r\nexport const MACAO_ZH = '澳门'\r\nexport const TAIWAN_ZH = '台湾'\r\nexport const KOREA_ZH = '韩国'\r\nexport const ITALY_EN = 'Italy'\r\nexport const ITALY_ZH = '意大利'\r\nexport const SWITZERLAND_ZH = '瑞士'\r\nexport const US_ZH = '美国'\r\nexport const US_EN = 'United States of America'\r\nexport const FRANCE_ZH = '法国'\r\nexport const FRANCE_EN = 'France'\r\nexport const METRO_FRANCE_ZH = '法国本土'\r\nexport const METRO_FRANCE_EN = 'Metropolitan France'\r\nexport const OVERSEAS_FRANCE_ZH = '海外领土'\r\nexport const OVERSEAS_FRANCE_EN = 'Overseas France'\r\nexport const GERMANY_ZH = '德国'\r\nexport const GERMANY_EN = 'Germany'\r\nexport const JAPAN_ZH = '日本'\r\nexport const AUSTRIA_ZH = '奥地利'\r\nexport const AUSTRALIA_ZH = '澳大利亚'\r\nexport const CANADA_ZH = '加拿大'\r\nexport const SPAIN_ZH = '西班牙'\r\nexport const UK_ZH = '英国'\r\nexport const UK_EN = 'United Kingdom'\r\nexport const UK_ABBR_EN = 'UK'\r\nexport const OVERSEAS_TERRITORIES_ZH = '海外领土'\r\nexport const OVERSEAS_TERRITORIES_EN = 'Overseas Territories'\r\nexport const CROWN_DEPENDENCIES_ZH = '皇家属地'\r\nexport const CROWN_DEPENDENCIES_EN = 'Crown Dependencies'\r\nexport const ENGLAND_ZH = '英格兰'\r\nexport const LONDON_EN = 'Greater London'\r\nexport const NETHERLANDS_ZH = '荷兰'\r\nexport const NETHERLANDS_EN = 'Netherlands'\r\nexport const DENMARK_ZH = '丹麦'\r\nexport const SWEDEN_ZH = '瑞典'\r\nexport const POLAND_ZH = '波兰'\r\nexport const NORWAY_ZH = '挪威'\r\nexport const IRAN_ZH = '伊朗'\r\nexport const PORTUGAL_ZH = '葡萄牙'\r\nexport const BRAZIL_ZH = '巴西'\r\nexport const MALAYSIA_ZH = '马来西亚'\r\nexport const CHILE_ZH = '智利'\r\nexport const BELGIUM_ZH = '比利时'\r\nexport const CZECHIA_ZH = '捷克'\r\nexport const RUSSIA_ZH = '俄罗斯'\r\nexport const MEXICO_ZH = '墨西哥'\r\nexport const ECUADOR_ZH = '厄瓜多尔'\r\nexport const ARGENTINA_ZH = '阿根廷'\r\nexport const INDIA_ZH = '印度'\r\nexport const PERU_ZH = '秘鲁'\r\nexport const IRELAND_ZH = '爱尔兰'\r\nexport const SOUTH_AFRICA_ZH = '南非'\r\nexport const PHILIPPINES_EN = 'Philippines'\r\nexport const PHILIPPINES_ZH = '菲律宾'\r\nexport const ROMANIA_ZH = '罗马尼亚'\r\nexport const INDONESIA_ZH = '印度尼西亚'\r\nexport const SAUDI_ARABIA_ZH = '沙特阿拉伯'\r\nexport const THAILAND_ZH = '泰国'\r\nexport const COLOMBIA_ZH = '哥伦比亚'\r\nexport const PAKISTAN_ZH = '巴基斯坦'\r\nexport const INTL_CONVEYANCE_EN = 'International Conveyance'\r\nexport const INTL_CONVEYANCE_ZH = '国际运输'\r\nexport const DIAMOND_PRINCESS_ZH = '钻石公主号'\r\nexport const EMPTY = '—'\r\n","import addDays from 'date-fns/addDays'\r\nimport subDays from 'date-fns/subDays'\r\nimport format from 'date-fns/format'\r\nimport i18n from '../data/i18n.yml'\r\nimport * as str from './strings'\r\n\r\nexport const parseDate = (date) => {\r\n    const [ year, month, day ] = date.substr(0, 10).split('-')\r\n    return new Date(year, month - 1, day)\r\n}\r\n\r\nexport const nextDay = (date, startDate, endDate) => {\r\n    const newDay = addDays(parseDate(date), 1)\r\n    const lastDay = parseDate(endDate)\r\n    return newDay <= lastDay ? format(newDay, 'yyyy-MM-dd') : startDate\r\n}\r\n\r\nexport const previousDay = (date, startDate, endDate) => {\r\n    const newDay = subDays(parseDate(date), 1)\r\n    const firstDay = parseDate(startDate)\r\n    return newDay >= firstDay ? format(newDay, 'yyyy-MM-dd') : endDate\r\n}\r\n\r\nexport const formatDate = (date, lang) => {\r\n    return format(parseDate(date), i18n.DATE_FORMAT_2[lang])\r\n}\r\n\r\nexport const isoDate = (date, endDate) => {\r\n    const d = new Date(date)\r\n    return new Date(d.getTime() - parseDate(endDate).getTimezoneOffset() * 60000).toISOString()\r\n}\r\n\r\nexport const metricText = {\r\n    confirmedCount: i18n.CONFIRMED,\r\n    deadCount: i18n.DEATHS,\r\n    curedCount: i18n.RECOVERED,\r\n    fatalityRate: i18n.FATALITY_RATE,\r\n    recoveryRate: i18n.RECOVERY_RATE\r\n}\r\n\r\nexport const getDataFromRegion = (data, region) => [ data, ...region ].reduce((s, x) => s[x])\r\n\r\nexport const simplifyName = (name, lang) => {\r\n    let simplified = name\r\n    // remove parenthesis to save space for legend\r\n    if (lang === 'en') simplified = name.split('(')[0].trim()\r\n\r\n    if (lang === 'en') simplified = simplified.replace('United States of America', 'USA')\r\n    if (lang === 'en') simplified = simplified.replace('United Kingdom', 'UK')\r\n    if (lang === 'en') simplified = simplified.replace('International Conveyance', \"Int'l Conveyance\")\r\n    if (lang === 'en') simplified = simplified.replace(' District', '')\r\n    if (lang === 'en') simplified = simplified.replace(' County', '')\r\n    if (lang === 'zh') simplified = simplified.replace('（来自钻石公主号）', '').trim()\r\n\r\n    return simplified\r\n}\r\n\r\nexport const updateDarkMode = (isDarkMode) => {\r\n    document.body.style.background = !isDarkMode ? '#fff' : 'var(--darker-grey)'\r\n    if (isDarkMode) {\r\n        document.body.classList.add('dark')\r\n    } else {\r\n        document.body.classList.remove('dark')\r\n    }\r\n}\r\n\r\nexport const generateTreeData = (\r\n    obj,\r\n    date,\r\n    lang,\r\n    simplified = true,\r\n    childrenLabel = 'children',\r\n    sortBy = null,\r\n    rootRegion = str.GLOBAL_ZH,\r\n    moreCounts = false\r\n) => {\r\n    const preDate = previousDay(date, '2019-09-01', '2050-01-01')\r\n\r\n    let data = Object.entries(obj)\r\n        .filter(([ k, v ]) => ![ 'confirmedCount', 'deadCount', 'curedCount', 'ENGLISH', str.GLOBAL_ZH ].includes(k))\r\n        .map(([ k, v ]) => {\r\n            const currentRegion = rootRegion === str.GLOBAL_ZH ? k : `${rootRegion}.${k}`\r\n            let newdata = {\r\n                name: k,\r\n                displayName: lang === 'zh' ? k : v.ENGLISH,\r\n                region: currentRegion,\r\n                confirmedCount:\r\n                    Object.keys(v.confirmedCount).length === 0\r\n                        ? NaN\r\n                        : v.confirmedCount[date] ? v.confirmedCount[date] : 0,\r\n                deadCount: Object.keys(v.deadCount).length === 0 ? NaN : v.deadCount[date] ? v.deadCount[date] : 0,\r\n                curedCount: Object.keys(v.curedCount).length === 0 ? NaN : v.curedCount[date] ? v.curedCount[date] : 0\r\n            }\r\n\r\n            if (moreCounts) {\r\n                const preConfirmedCount =\r\n                    preDate in v.confirmedCount ? v.confirmedCount[preDate] : newdata.confirmedCount\r\n                const preDeadCount = preDate in v.deadCount ? v.deadCount[preDate] : newdata.deadCount\r\n\r\n                newdata = {\r\n                    ...newdata,\r\n                    active: newdata.confirmedCount - newdata.deadCount - newdata.curedCount,\r\n                    newConfirmed: newdata.confirmedCount - preConfirmedCount,\r\n                    newDead: newdata.deadCount - preDeadCount,\r\n                    fatalityRate: newdata.deadCount / newdata.confirmedCount,\r\n                    recoveryRate: newdata.curedCount / newdata.confirmedCount\r\n                }\r\n            }\r\n\r\n            // remove some regions for the simplicity of bubble plot\r\n            if (\r\n                simplified &&\r\n                (k === str.LONDON_EN ||\r\n                    (obj.ENGLISH === str.NETHERLANDS_EN && k === str.NETHERLANDS_ZH) ||\r\n                    obj.ENGLISH === str.MAINLAND_CHINA_EN ||\r\n                    obj.ENGLISH === str.ITALY_EN ||\r\n                    obj.ENGLISH === str.PHILIPPINES_EN ||\r\n                    obj.ENGLISH === str.US_EN)\r\n            )\r\n                return newdata\r\n\r\n            if (Object.keys(v).length > 4) {\r\n                newdata[childrenLabel] = generateTreeData(\r\n                    v,\r\n                    date,\r\n                    lang,\r\n                    simplified,\r\n                    childrenLabel,\r\n                    sortBy,\r\n                    currentRegion,\r\n                    moreCounts\r\n                )\r\n            }\r\n            return newdata\r\n        })\r\n\r\n    return sortBy ? data.sort((a, b) => (a[sortBy] > b[sortBy] || isNaN(b[sortBy]) ? -1 : 1)) : data\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { ComposableMap, ZoomableGroup, Geographies, Geography, Marker, Line } from 'react-simple-maps'\r\nimport { scaleSequential, scaleLog, scaleLinear } from 'd3-scale'\r\nimport { interpolateMagma } from 'd3-scale-chromatic'\r\nimport { PatternLines } from '@vx/pattern'\r\nimport { isMobile, isIPad13 } from 'react-device-detect'\r\nimport { TinyColor } from '@ctrl/tinycolor'\r\nimport { FaShip } from 'react-icons/fa'\r\nimport Toggle from 'react-toggle'\r\nimport 'react-toggle/style.css'\r\nimport maps from '../data/maps.yml'\r\nimport us_map from '../data/us_map.yml'\r\nimport transmissions from '../data/transmissions.yml'\r\nimport coord from '../data/transmissions_coord.yml'\r\nimport { getDataFromRegion, parseDate } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nclass Map extends Component {\r\n    state = {\r\n        loaded: false,\r\n        cursor: [ 0, 0 ],\r\n        clicked: false,\r\n        showTransmissions: false,\r\n        usState: null\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.currentMap !== prevProps.currentMap || this.state.usState !== prevState.usState) {\r\n            this.setState({ loaded: false })\r\n            setTimeout(() => {\r\n                this.props.tooltipRebuild()\r\n            }, 100)\r\n        }\r\n\r\n        if (this.props.currentMap === str.US_MAP2) {\r\n            const usState = this.props.currentRegion[1]\r\n            if (usState !== this.state.usState) {\r\n                this.setState({ usState })\r\n            }\r\n        }\r\n    }\r\n\r\n    handleGeographyClick = (region) => () => {\r\n        if (!this.state.clicked || region == null) return\r\n\r\n        this.props.regionToggle(region.split('.'))\r\n    }\r\n\r\n    onZoomEnd = (event, state) => {\r\n        this.props.handleMapZoomChange(state.zoom)\r\n    }\r\n\r\n    getConfig = (config, defaultConfig) =>\r\n        config != null ? config.split(',').map((d) => parseInt(d, 10)) : defaultConfig\r\n\r\n    getColorScale = (isUsState) => {\r\n        const { data, currentRegion, scale, metric, darkMode } = this.props\r\n        const currentMap = maps[this.props.currentMap]\r\n\r\n        const currentScale = scale === 'linear' ? scaleLinear : scaleLog\r\n\r\n        let maxCount = currentMap[`maxScale_${metric}`]\r\n        if (isUsState && metric === 'confirmedCount') {\r\n            const stateData = getDataFromRegion(data, currentRegion.slice(0, 2))\r\n            maxCount = Math.max(\r\n                ...Object.keys(stateData)\r\n                    .filter((x) => ![ 'confirmedCount', 'curedCount', 'deadCount', 'ENGLISH' ].includes(x))\r\n                    .map((county) => Math.max(...Object.values(stateData[county][metric])))\r\n            )\r\n        }\r\n        const mapScale = currentScale().domain([ 1, maxCount ]).clamp(true)\r\n        const colorConvert = (x) => (darkMode ? x * 0.95 + 0.05 : 0.95 - x * 0.95)\r\n        const colorScale = scaleSequential((d) => {\r\n            if (!this.state.showTransmissions || this.props.currentMap !== str.WORLD_MAP) {\r\n                const color = new TinyColor(interpolateMagma(colorConvert(mapScale(d))))\r\n                if (!darkMode) return color.toRgbString()\r\n\r\n                return color.desaturate(10).toRgbString()\r\n            } else {\r\n                const greyedColor = new TinyColor(interpolateMagma(colorConvert(mapScale(d)))).desaturate(100)\r\n                if (!darkMode) return greyedColor.setAlpha(0.6).toRgbString()\r\n\r\n                // make the colors distinguishable from dark background\r\n                return greyedColor.getLuminance() < 0.09\r\n                    ? greyedColor.darken(5).setAlpha(0.9).toRgbString()\r\n                    : greyedColor.lighten(5).setAlpha(0.9).toRgbString()\r\n            }\r\n        })\r\n\r\n        return { colorScale, mapScale }\r\n    }\r\n\r\n    getStrokeColor = (counts, isUsState) => {\r\n        const { colorScale, mapScale } = this.getColorScale(isUsState)\r\n        const { darkMode } = this.props\r\n        const tinyColor = new TinyColor(colorScale(counts))\r\n\r\n        if (!darkMode) {\r\n            return tinyColor.isDark()\r\n                ? colorScale(mapScale.invert(mapScale(counts) - 0.6))\r\n                : colorScale(mapScale.invert(mapScale(counts) + 0.3))\r\n        } else {\r\n            return tinyColor.isDark()\r\n                ? colorScale(mapScale.invert(mapScale(counts) + 0.5))\r\n                : colorScale(mapScale.invert(mapScale(counts) - 0.5))\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.currentMap === str.TRANSMISSION) return <div />\r\n\r\n        const currentMap = maps[this.props.currentMap]\r\n        const { data, metric, date, lang, currentRegion, mapZoom, darkMode } = this.props\r\n\r\n        const lang_map = lang !== 'zh'? 'en' : 'zh'\r\n        const isUsState =\r\n            this.props.currentMap === str.US_MAP2 && this.state.usState != null && this.state.usState in us_map\r\n        const center = isUsState\r\n            ? us_map[this.state.usState].center.split(',').map((d) => parseFloat(d))\r\n            : currentMap.center.split(',').map((d) => parseFloat(d))\r\n        const scale = isUsState ? us_map[this.state.usState].scale : currentMap.scale\r\n        const projection = isUsState ? 'geoMercator' : currentMap.projection\r\n\r\n        const { colorScale } = this.getColorScale(isUsState)\r\n        const cruiseData = getDataFromRegion(data, [ str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH ])\r\n        const cruiseCounts = cruiseData[metric][date] ? cruiseData[metric][date] : 0\r\n\r\n        const cruiseStrokeColor = this.getStrokeColor(cruiseCounts, isUsState)\r\n        const greyStrokeColor = darkMode ? 'var(--primary-color-10)' : 'var(--grey)'\r\n\r\n        return (\r\n            <Fragment>\r\n                {this.props.currentMap === str.WORLD_MAP && (\r\n                    <div className=\"map-transmission-toggle-wrap\">\r\n                        <Toggle\r\n                            className=\"map-transmission-toggle\"\r\n                            defaultChecked={this.state.showTransmissions}\r\n                            onChange={() => this.setState({ showTransmissions: !this.state.showTransmissions })}\r\n                            icons={false}\r\n                        />\r\n                        <span>{i18n.TRANSMISSIONS[this.props.lang]}</span>\r\n                    </div>\r\n                )}\r\n                <ComposableMap\r\n                    projection={projection}\r\n\r\n                    projectionConfig={{\r\n                        scale: scale,\r\n                        rotate: currentMap.rotate\r\n                            ? currentMap.rotate.split(',').map((x) => parseInt(x, 10))\r\n                            : [ 0, 0, 0 ],\r\n                        parallels: currentMap.parallels\r\n                            ? currentMap.parallels.split(',').map((x) => parseInt(x, 10))\r\n                            : [ 0, 0 ]\r\n                    }}\r\n                >\r\n                    <PatternLines\r\n                        id=\"lines\"\r\n                        height={6}\r\n                        width={6}\r\n                        stroke={greyStrokeColor}\r\n                        strokeWidth={1}\r\n                        background={darkMode ? 'var(--darker-grey)' : '#fff'}\r\n                        orientation={[ 'diagonal' ]}\r\n                    />\r\n                    <PatternLines\r\n                        id=\"background-lines\"\r\n                        height={6}\r\n                        width={6}\r\n                        stroke={darkMode ? '#333' : '#ddd'}\r\n                        strokeWidth={1}\r\n                        background={darkMode ? 'var(--darker-grey)' : '#fff'}\r\n                        orientation={[ 'diagonal' ]}\r\n                    />\r\n                    <ZoomableGroup\r\n                        zoom={mapZoom}\r\n                        onZoomEnd={this.onZoomEnd}\r\n                        onMoveStart={(e, m) => this.setState({ cursor: [ m.x, m.y ], clicked: false })}\r\n                        onMoveEnd={(e, m) => {\r\n                            // click on desktop\r\n                            if (Math.abs(m.x - this.state.cursor[0]) < 1 && Math.abs(m.y - this.state.cursor[1]) < 1)\r\n                                this.setState({ clicked: true })\r\n                        }}\r\n                        onTouchStart={\r\n                            // click on touch screens\r\n                            isMobile || isIPad13 ? () => this.setState({ clicked: true }) : null\r\n                        }\r\n                        center={center}\r\n                        minZoom={0.2}\r\n                        maxZoom={5}\r\n                        disableZooming={isMobile || isIPad13}\r\n                        disablePanning={isMobile || isIPad13}\r\n                    >\r\n                        {![ str.WORLD_MAP, str.US_MAP ].includes(this.props.currentMap) && (\r\n                            <Geographies\r\n                                geography={`maps/${this.props.currentMap === str.US_MAP2\r\n                                    ? 'USA'\r\n                                    : this.props.currentMap === str.HONGKONG_MAP ? 'CHN_1' : 'WORLD'}.json`}\r\n                                onMouseEnter={() => {\r\n                                    if (!this.state.loaded) {\r\n                                        this.setState({ loaded: true })\r\n                                        this.props.tooltipRebuild()\r\n                                    }\r\n                                }}\r\n                            >\r\n                                {({ geographies }) =>\r\n                                    geographies.map((geo) => {\r\n                                        let counts = 0\r\n                                        if (geo.properties.REGION != null) {\r\n                                            const region = getDataFromRegion(data, geo.properties.REGION.split('.'))\r\n                                            if (region && region[metric] && region[metric][date])\r\n                                                counts = region[metric][date]\r\n                                        }\r\n                                        const backgroundMap =\r\n                                            this.props.currentMap === str.US_MAP2\r\n                                                ? str.US_MAP\r\n                                                : this.props.currentMap === str.HONGKONG_MAP\r\n                                                  ? str.CHINA_MAP1\r\n                                                  : str.WORLD_MAP\r\n                                        const name = geo.properties[maps[backgroundMap].name_key[lang_map]]\r\n                                        const isCurrentCountryOrState =\r\n                                            backgroundMap === str.WORLD_MAP\r\n                                                ? geo.properties.CHINESE_NAME === currentRegion[0]\r\n                                                : geo.properties.CHINESE_NAME === currentRegion[1]\r\n                                        if (isCurrentCountryOrState) return <div />\r\n                                        if (backgroundMap === str.US_MAP && currentRegion.length === 1) return <div />\r\n                                        return (\r\n                                            <Geography\r\n                                                className=\"map-geography\"\r\n                                                key={geo.rsmKey}\r\n                                                geography={geo}\r\n                                                data-tip={`${name} <span class=\"plot-tooltip-bold\">${counts}</span>`}\r\n                                                style={{\r\n                                                    default: {\r\n                                                        fill: darkMode ? 'var(--darker-grey)' : '#fff',\r\n                                                        stroke: darkMode ? '#333' : '#ddd',\r\n                                                        strokeWidth: 2\r\n                                                    },\r\n                                                    hover: {\r\n                                                        fill: `url(\"#background-lines\") ${darkMode ? '#333' : '#ddd'}`,\r\n                                                        stroke: darkMode ? '#333' : '#ddd',\r\n                                                        strokeWidth: 2,\r\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\r\n                                                    },\r\n                                                    pressed: {\r\n                                                        fill: `url(\"#background-lines\") ${darkMode ? '#333' : '#ddd'}`,\r\n                                                        stroke: darkMode ? '#333' : '#ddd',\r\n                                                        strokeWidth: 2,\r\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\r\n                                                    }\r\n                                                }}\r\n                                                onClick={this.handleGeographyClick(geo.properties.REGION)}\r\n                                            />\r\n                                        )\r\n                                    })}\r\n                            </Geographies>\r\n                        )}\r\n                        <Geographies\r\n                            geography={`maps/${currentMap.filename}`}\r\n                            onMouseEnter={() => {\r\n                                if (!this.state.loaded) {\r\n                                    this.setState({ loaded: true })\r\n                                    this.props.tooltipRebuild()\r\n                                }\r\n                            }}\r\n                        >\r\n                            {({ geographies }) =>\r\n                                geographies.map((geo, i) => {\r\n                                    let counts = 0\r\n                                    if (geo.properties.REGION != null) {\r\n                                        const region = getDataFromRegion(data, geo.properties.REGION.split('.'))\r\n                                        if (region && region[metric] && region[metric][date])\r\n                                            counts = region[metric][date]\r\n                                    }\r\n                                    const name = geo.properties[currentMap.name_key[lang_map]]\r\n                                    let isCurrentRegion =\r\n                                        geo.properties[currentMap.name_key.zh] ===\r\n                                        currentRegion[currentRegion.length - 1]\r\n                                    if (currentMap.parent_key)\r\n                                        isCurrentRegion =\r\n                                            isCurrentRegion &&\r\n                                            geo.properties[currentMap.parent_key] ===\r\n                                                currentRegion[currentRegion.length - 2]\r\n\r\n                                    // highlight all cities in the province\r\n                                    let isParentRegion = false\r\n                                    if (currentMap.parent_key) {\r\n                                        isParentRegion =\r\n                                            geo.properties[currentMap.parent_key] ===\r\n                                            currentRegion[currentRegion.length - 1]\r\n                                        if (currentRegion.length >= 3)\r\n                                            isParentRegion =\r\n                                                isParentRegion ||\r\n                                                geo.properties[currentMap.parent_key] ===\r\n                                                    currentRegion[currentRegion.length - 2]\r\n                                        if (\r\n                                            currentRegion.length === 1 ||\r\n                                            currentRegion[currentRegion.length - 1] === str.MAINLAND_CHINA_ZH\r\n                                        )\r\n                                            isParentRegion = true\r\n                                        isParentRegion = isParentRegion || isCurrentRegion\r\n                                    } else {\r\n                                        isParentRegion = true\r\n                                    }\r\n\r\n                                    const strokeColor =\r\n                                        counts === 0 ? greyStrokeColor : this.getStrokeColor(counts, isUsState)\r\n\r\n                                    // US map\r\n                                    if (this.props.currentMap === str.US_MAP2 && !isParentRegion) return <div />\r\n\r\n                                    return (\r\n                                        <Fragment key={`fragment-${geo.rsmKey}`}>\r\n                                            <Geography\r\n                                                key={geo.rsmKey}\r\n                                                className=\"map-geography\"\r\n                                                geography={geo}\r\n                                                data-tip={`${name} <span class=\"plot-tooltip-bold\">${counts}</span>`}\r\n                                                style={{\r\n                                                    default: {\r\n                                                        fill: isCurrentRegion\r\n                                                            ? `url(\"#highlightLines-${i}\") ${greyStrokeColor}`\r\n                                                            : counts > 0 ? colorScale(counts) : 'url(\"#lines\")',\r\n                                                        stroke: strokeColor,\r\n                                                        strokeWidth: isCurrentRegion ? 1 : 0,\r\n                                                        opacity: isParentRegion ? 1 : 0.2\r\n                                                    },\r\n                                                    hover: {\r\n                                                        fill: `url(\"#highlightLines-${i}\") ${greyStrokeColor}`,\r\n                                                        strokeWidth: 1,\r\n                                                        stroke: strokeColor,\r\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\r\n                                                    },\r\n                                                    pressed: {\r\n                                                        fill: `url(\"#highlightLines-${i}\") ${greyStrokeColor}`,\r\n                                                        strokeWidth: 1,\r\n                                                        stroke: strokeColor,\r\n                                                        cursor: counts > 0 ? 'pointer' : 'default'\r\n                                                    }\r\n                                                }}\r\n                                                onClick={this.handleGeographyClick(geo.properties.REGION)}\r\n                                            />\r\n                                            <PatternLines\r\n                                                id={`highlightLines-${i}`}\r\n                                                height={6}\r\n                                                width={6}\r\n                                                stroke={strokeColor}\r\n                                                strokeWidth={1}\r\n                                                background={\r\n                                                    counts !== 0 ? (\r\n                                                        colorScale(counts)\r\n                                                    ) : darkMode ? (\r\n                                                        'var(--darker-grey)'\r\n                                                    ) : (\r\n                                                        '#fff'\r\n                                                    )\r\n                                                }\r\n                                                orientation={[ 'diagonal' ]}\r\n                                            />\r\n                                        </Fragment>\r\n                                    )\r\n                                })}\r\n                        </Geographies>\r\n                        {this.props.currentMap === str.WORLD_MAP &&\r\n                            this.state.showTransmissions &&\r\n                            transmissions\r\n                                .filter((trans) => parseDate(trans.date) <= parseDate(date))\r\n                                .map((trans, i) => {\r\n                                    return (\r\n                                        <Line\r\n                                            keys={`transmission-${i}`}\r\n                                            from={coord[trans.from].split(',').map((c) => parseFloat(c))}\r\n                                            to={coord[trans.to].split(',').map((c) => parseFloat(c))}\r\n                                            stroke={darkMode ? 'rgba(222,73,104,0.9)' : 'rgba(222, 73, 104, 0.5)'}\r\n                                            strokeWidth={1}\r\n                                            strokeLinecap=\"round\"\r\n                                            style={{\r\n                                                pointerEvents: 'none'\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                        {[ str.WORLD_MAP, str.CHINA_MAP1, str.CHINA_MAP2 ].includes(this.props.currentMap) && (\r\n                            <Marker key={'wuhan'} coordinates={[ 114.2, 30.3 ]}>\r\n                                <g\r\n                                    fill=\"none\"\r\n                                    stroke=\"var(--primary-color-4)\"\r\n                                    strokeWidth=\"2\"\r\n                                    pointerEvents=\"none\"\r\n                                    strokeLinecap=\"round\"\r\n                                    strokeLinejoin=\"round\"\r\n                                    transform=\"translate(-12, -24)\"\r\n                                >\r\n                                    <circle cx=\"12\" cy=\"10\" r=\"3\" />\r\n                                    <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\r\n                                </g>\r\n                            </Marker>\r\n                        )}\r\n                        {(this.props.currentMap === str.WORLD_MAP || this.props.currentMap === str.JAPAN_MAP) && (\r\n                            <Marker key={'diamond-princess'} coordinates={[ 139.6, 35.4 ]}>\r\n                                <FaShip\r\n                                    size={this.props.currentMap === str.WORLD_MAP ? 18 : 36}\r\n                                    color={colorScale(cruiseCounts)}\r\n                                    className=\"map-ship\"\r\n                                    data-tip={`${lang === 'zh'\r\n                                        ? str.DIAMOND_PRINCESS_ZH\r\n                                        : cruiseData.ENGLISH} <span class=\"plot-tooltip-bold\">${cruiseCounts}</span>`}\r\n                                    style={{\r\n                                        stroke: cruiseStrokeColor,\r\n                                        visibility: cruiseCounts > 0 ? 'visible' : 'hidden',\r\n                                        strokeWidth:\r\n                                            currentRegion[currentRegion.length - 1] === str.DIAMOND_PRINCESS_ZH ? 30 : 0\r\n                                    }}\r\n                                    onClick={() =>\r\n                                        this.props.regionToggle([ str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH ])}\r\n                                />\r\n                            </Marker>\r\n                        )}\r\n                    </ZoomableGroup>\r\n                </ComposableMap>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map\r\n","import i18n from '../data/i18n.yml'\r\nimport * as str from '../utils/strings'\r\n\r\nexport const mapText = {\r\n    WORLD: {\r\n        title: i18n.WORLD_MAP,\r\n        regionName: str.GLOBAL_ZH,\r\n        flagCode: 'un',\r\n        continent: i18n.WORLD_MAP\r\n    },\r\n    CHN1: {\r\n        title: i18n.CHINA_MAP1,\r\n        regionName: str.CHINA_ZH,\r\n        flagCode: 'cn',\r\n        continent: i18n.ASIA\r\n    },\r\n    CHN2: {\r\n        title: i18n.CHINA_MAP2,\r\n        regionName: str.CHINA_ZH,\r\n        flagCode: 'cn',\r\n        continent: i18n.ASIA\r\n    },\r\n    IRN: {\r\n        title: i18n.IRAN_MAP,\r\n        regionName: str.IRAN_ZH,\r\n        flagCode: 'ir',\r\n        continent: i18n.ASIA\r\n    },\r\n    EUROPE: {\r\n        title: i18n.EUROPE,\r\n        regionName: str.GLOBAL_ZH,\r\n        flagCode: 'eu',\r\n        continent: i18n.EUROPE\r\n    },\r\n    ITA: {\r\n        title: i18n.ITALY_MAP,\r\n        regionName: str.ITALY_ZH,\r\n        flagCode: 'it',\r\n        continent: i18n.EUROPE\r\n    },\r\n    ITA2: {\r\n        title: i18n.ITALY_MAP2,\r\n        regionName: str.ITALY_ZH,\r\n        flagCode: 'it',\r\n        continent: i18n.EUROPE\r\n    },\r\n    ESP: {\r\n        title: i18n.SPAIN_MAP,\r\n        regionName: str.SPAIN_ZH,\r\n        flagCode: 'es',\r\n        continent: i18n.EUROPE\r\n    },\r\n    DEU: {\r\n        title: i18n.GERMANY_MAP,\r\n        regionName: str.GERMANY_ZH,\r\n        flagCode: 'de',\r\n        continent: i18n.EUROPE\r\n    },\r\n    FRA: {\r\n        title: i18n.FRANCE_MAP,\r\n        regionName: str.FRANCE_ZH,\r\n        flagCode: 'fr',\r\n        continent: i18n.EUROPE\r\n    },\r\n    US: {\r\n        title: i18n.US_MAP,\r\n        regionName: str.US_ZH,\r\n        flagCode: 'us',\r\n        continent: i18n.NORTH_AMERICA\r\n    },\r\n    US2: {\r\n        title: i18n.US_MAP2,\r\n        regionName: str.US_ZH,\r\n        flagCode: 'us',\r\n        continent: i18n.NORTH_AMERICA\r\n    },\r\n    KOR: {\r\n        title: i18n.KOREA_MAP,\r\n        regionName: str.KOREA_ZH,\r\n        flagCode: 'kr',\r\n        continent: i18n.ASIA\r\n    },\r\n    CHE: {\r\n        title: i18n.SWITZERLAND_MAP,\r\n        regionName: str.SWITZERLAND_ZH,\r\n        flagCode: 'ch',\r\n        continent: i18n.EUROPE\r\n    },\r\n    GBR: {\r\n        title: i18n.UK_MAP,\r\n        regionName: str.UK_ZH,\r\n        flagCode: 'gb',\r\n        continent: i18n.EUROPE\r\n    },\r\n    NLD: {\r\n        title: i18n.NETHERLANDS_MAP,\r\n        regionName: str.NETHERLANDS_ZH,\r\n        flagCode: 'nl',\r\n        continent: i18n.EUROPE\r\n    },\r\n    BEL: {\r\n        title: i18n.BELGIUM_MAP,\r\n        regionName: str.BELGIUM_ZH,\r\n        flagCode: 'be',\r\n        continent: i18n.EUROPE\r\n    },\r\n    IND: {\r\n        title: i18n.INDIA_MAP,\r\n        regionName: str.INDIA_ZH,\r\n        flagCode: 'in',\r\n        continent: i18n.ASIA\r\n    },\r\n    JPN: {\r\n        title: i18n.JAPAN_MAP,\r\n        regionName: str.JAPAN_ZH,\r\n        flagCode: 'jp',\r\n        continent: i18n.ASIA\r\n    },\r\n    PAK: {\r\n        title: i18n.PAKISTAN_MAP,\r\n        regionName: str.PAKISTAN_ZH,\r\n        flagCode: 'pk',\r\n        continent: i18n.ASIA\r\n    },\r\n    MYS: {\r\n        title: i18n.MALAYSIA_MAP,\r\n        regionName: str.MALAYSIA_ZH,\r\n        flagCode: 'my',\r\n        continent: i18n.ASIA\r\n    },\r\n    PHL: {\r\n        title: i18n.PHILIPPINES_MAP,\r\n        regionName: str.PHILIPPINES_ZH,\r\n        flagCode: 'ph',\r\n        continent: i18n.ASIA\r\n    },\r\n    SAU: {\r\n        title: i18n.SAUDI_ARABIA_MAP,\r\n        regionName: str.SAUDI_ARABIA_ZH,\r\n        flagCode: 'sa',\r\n        continent: i18n.ASIA\r\n    },\r\n    IDN: {\r\n        title: i18n.INDONESIA_MAP,\r\n        regionName: str.INDONESIA_ZH,\r\n        flagCode: 'id',\r\n        continent: i18n.ASIA\r\n    },\r\n    THA: {\r\n        title: i18n.THAILAND_MAP,\r\n        regionName: str.THAILAND_ZH,\r\n        flagCode: 'th',\r\n        continent: i18n.ASIA\r\n    },\r\n    AUT: {\r\n        title: i18n.AUSTRIA_MAP,\r\n        regionName: str.AUSTRIA_ZH,\r\n        flagCode: 'at',\r\n        continent: i18n.EUROPE\r\n    },\r\n    PRT: {\r\n        title: i18n.PORTUGAL_MAP,\r\n        regionName: str.PORTUGAL_ZH,\r\n        flagCode: 'pt',\r\n        continent: i18n.EUROPE\r\n    },\r\n    NOR: {\r\n        title: i18n.NORWAY_MAP,\r\n        regionName: str.NORWAY_ZH,\r\n        flagCode: 'no',\r\n        continent: i18n.EUROPE\r\n    },\r\n    AUS: {\r\n        title: i18n.AUSTRALIA_MAP,\r\n        regionName: str.AUSTRALIA_ZH,\r\n        flagCode: 'au',\r\n        continent: i18n.OCEANIA\r\n    },\r\n    CAN: {\r\n        title: i18n.CANADA_MAP,\r\n        regionName: str.CANADA_ZH,\r\n        flagCode: 'ca',\r\n        continent: i18n.NORTH_AMERICA\r\n    },\r\n    SWE: {\r\n        title: i18n.SWEDEN_MAP,\r\n        regionName: str.SWEDEN_ZH,\r\n        flagCode: 'se',\r\n        continent: i18n.EUROPE\r\n    },\r\n    RUS: {\r\n        title: i18n.RUSSIA_MAP,\r\n        regionName: str.RUSSIA_ZH,\r\n        flagCode: 'ru',\r\n        continent: i18n.EUROPE\r\n    },\r\n    IRL: {\r\n        title: i18n.IRELAND_MAP,\r\n        regionName: str.IRELAND_ZH,\r\n        flagCode: 'ie',\r\n        continent: i18n.EUROPE\r\n    },\r\n    CZE: {\r\n        title: i18n.CZECHIA_MAP,\r\n        regionName: str.CZECHIA_ZH,\r\n        flagCode: 'cz',\r\n        continent: i18n.EUROPE\r\n    },\r\n    ROU: {\r\n        title: i18n.ROMANIA_MAP,\r\n        regionName: str.ROMANIA_ZH,\r\n        flagCode: 'ro',\r\n        continent: i18n.EUROPE\r\n    },\r\n    POL: {\r\n        title: i18n.POLAND_MAP,\r\n        regionName: str.POLAND_ZH,\r\n        flagCode: 'pl',\r\n        continent: i18n.EUROPE\r\n    },\r\n    BRA: {\r\n        title: i18n.BRAZIL_MAP,\r\n        regionName: str.BRAZIL_ZH,\r\n        flagCode: 'br',\r\n        continent: i18n.SOUTH_AMERICA\r\n    },\r\n    CHL: {\r\n        title: i18n.CHILE_MAP,\r\n        regionName: str.CHILE_ZH,\r\n        flagCode: 'cl',\r\n        continent: i18n.SOUTH_AMERICA\r\n    },\r\n    MEX: {\r\n        title: i18n.MEXICO_MAP,\r\n        regionName: str.MEXICO_ZH,\r\n        flagCode: 'mx',\r\n        continent: i18n.NORTH_AMERICA\r\n    },\r\n    ECU: {\r\n        title: i18n.ECUADOR_MAP,\r\n        regionName: str.ECUADOR_ZH,\r\n        flagCode: 'ec',\r\n        continent: i18n.SOUTH_AMERICA\r\n    },\r\n    PER: {\r\n        title: i18n.PERU_MAP,\r\n        regionName: str.PERU_ZH,\r\n        flagCode: 'pe',\r\n        continent: i18n.SOUTH_AMERICA\r\n    },\r\n    COL: {\r\n        title: i18n.COLOMBIA_MAP,\r\n        regionName: str.COLOMBIA_ZH,\r\n        flagCode: 'co',\r\n        continent: i18n.SOUTH_AMERICA\r\n    },\r\n    ARG: {\r\n        title: i18n.ARGENTINA_MAP,\r\n        regionName: str.ARGENTINA_ZH,\r\n        flagCode: 'ar',\r\n        continent: i18n.SOUTH_AMERICA\r\n    },\r\n    ZAF: {\r\n        title: i18n.SOUTH_AFRICA_MAP,\r\n        regionName: str.SOUTH_AFRICA_ZH,\r\n        flagCode: 'za',\r\n        continent: i18n.AFRICA\r\n    },\r\n    HKG: {\r\n        title: i18n.HONGKONG_MAP,\r\n        regionName: str.HONGKONG_ZH,\r\n        flagCode: 'hk',\r\n        continent: i18n.ASIA\r\n    },\r\n    TRANSMISSION: {\r\n        title: i18n.TRANSMISSION_NETWORK,\r\n        continent: null\r\n    }\r\n}\r\n","import React from 'react'\r\nimport format from 'date-fns/format'\r\nimport i18n from '../data/i18n.yml'\r\nimport { parseDate, formatDate } from './utils'\r\n\r\nconst integerFormat = (e) =>\r\n    parseInt(e, 10) !== e\r\n        ? ''\r\n        : Math.abs(e) < 1000\r\n          ? e\r\n          : Math.abs(e) < 10 ** 6 ? `${e / 1000}K` : Math.abs(e) < 10 ** 9 ? `${e / 10 ** 6}M` : `${e / 10 ** 9}B`\r\n\r\nconst absIntegerFormat = (e) =>\r\n    parseInt(e, 10) !== e ? '' : Math.abs(e) < 1000 ? Math.abs(e) : `${Math.abs(e) / 1000}K`\r\n\r\nconst streamTimeFormat = (idx, interval, dates) => (idx % interval === 0 ? format(parseDate(dates[idx]), 'M/d') : '')\r\n\r\nconst fatalityTooltip = (yLabel, xLabel) => ({ point }) => (\r\n    <div className=\"plot-tooltip plot-tooltip-line\">\r\n        <div className={point.data.name || point.data.regionName ? 'plot-tooltip-bold' : ''}>\r\n            {point.data.name ? (\r\n                `${point.data.name} ${point.data.years ? '(' + point.data.years + ')' : ''}`\r\n            ) : point.data.regionName ? (\r\n                point.data.regionName\r\n            ) : (\r\n                formatDate(point.data.date, point.data.lang)\r\n            )}\r\n        </div>\r\n        <div>\r\n            <span>{yLabel[point.data.lang]}</span>\r\n            <span className=\"plot-tooltip-bold\">{` ${point.data.yFormatted}`}</span>\r\n        </div>\r\n        <div>\r\n            <span>{xLabel[point.data.lang]}</span>\r\n            <span className=\"plot-tooltip-bold\">{` ${point.data.xFormatted}`}</span>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nconst regionLegends = {\r\n    anchor: 'right',\r\n    direction: 'column',\r\n    translateX: 100,\r\n    itemWidth: 90,\r\n    itemHeight: 20,\r\n    itemTextColor: '#000',\r\n    symbolSize: 12,\r\n    symbolShape: 'circle'\r\n}\r\n\r\nexport const getSpecificPlotType = (plotType, plotDetails) => {\r\n    let specificType = ''\r\n    if (plotType === 'plot_basic') {\r\n        specificType = plotDetails.stats === 'cumulative' ? 'total' : 'new'\r\n    } else if (plotType === 'plot_fatality_recovery') {\r\n        specificType = 'fatality_recovery'\r\n    } else if (plotType === 'plot_growth') {\r\n        specificType = plotDetails.stats === 'cumulative' ? 'growth_total' : 'growth_new'\r\n    } else if (plotType === 'plot_one_vs_rest') {\r\n        specificType = plotDetails.stats === 'cumulative' ? 'one_vs_rest' : 'one_vs_rest_new'\r\n    } else if (plotType === 'plot_fatality_line') {\r\n        if (plotDetails.diseaseComparison === 'show')\r\n            specificType = plotDetails.fatalityLine === 'rate' ? 'fatality_line' : 'fatality_line2'\r\n        if (plotDetails.diseaseComparison === 'hide')\r\n            specificType = plotDetails.fatalityLine === 'rate' ? 'fatality_line_only' : 'fatality_line2_only'\r\n    } else if (plotType === 'plot_ranking') {\r\n        specificType = plotDetails.stats === 'cumulative' ? 'most_affected_subregions' : 'most_affected_subregions_new'\r\n    } else if (plotType === 'plot_subregion_basic') {\r\n        specificType = plotDetails.stats === 'cumulative' ? 'subregion_total' : 'subregion_new'\r\n    } else if (plotType === 'plot_subregion_stream') {\r\n        specificType = plotDetails.stats === 'cumulative' ? 'subregion_total_stream' : 'subregion_new_stream'\r\n    } else if (plotType === 'plot_subregion_active_stream') {\r\n        specificType = 'subregion_active_stream'\r\n    } else if (plotType === 'plot_subregion_fatality') {\r\n        if (plotDetails.diseaseComparison === 'show')\r\n            specificType = plotDetails.fatalityLine === 'rate' ? 'subregion_fatality' : 'subregion_fatality2'\r\n        if (plotDetails.diseaseComparison === 'hide')\r\n            specificType = plotDetails.fatalityLine === 'rate' ? 'subregion_fatality_only' : 'subregion_fatality2_only'\r\n    } else if (plotType === 'plot_subregion_shifted') {\r\n        if (plotDetails.shifted === '100')\r\n            specificType =\r\n                plotDetails.stats === 'cumulative' ? 'subregion_total_shifted_100' : 'subregion_new_shifted_100'\r\n        if (plotDetails.shifted === '10')\r\n            specificType =\r\n                plotDetails.stats === 'cumulative' ? 'subregion_total_shifted_10' : 'subregion_new_shifted_10'\r\n    } else if (plotType === 'plot_doubling_time') {\r\n        specificType = 'doubling_time'\r\n    } else if (plotType === 'plot_r0') {\r\n        specificType = 'r0'\r\n    }\r\n\r\n    return specificType\r\n}\r\n\r\nexport const plotTypes = {\r\n    plot_basic: {\r\n        subregions: false,\r\n        metricChange: false,\r\n        statsChange: true,\r\n        scaleChange: true,\r\n        movingAverage: true,\r\n        text: i18n.CASES\r\n    },\r\n    plot_fatality_recovery: {\r\n        subregions: false,\r\n        metricChange: false,\r\n        statsChange: false,\r\n        scaleChange: false,\r\n        movingAverage: true,\r\n        text: i18n.FATALITY_RECOVERY_RATE\r\n    },\r\n    plot_growth: {\r\n        subregions: false,\r\n        metricChange: true,\r\n        statsChange: true,\r\n        scaleChange: false,\r\n        movingAverage: true,\r\n        text: i18n.GROWTH_RATE\r\n    },\r\n    plot_one_vs_rest: {\r\n        subregions: false,\r\n        metricChange: true,\r\n        statsChange: true,\r\n        scaleChange: true,\r\n        movingAverage: true,\r\n        text: i18n.ONE_VS_REST\r\n    },\r\n    plot_fatality_line: {\r\n        subregions: false,\r\n        metricChange: false,\r\n        statsChange: false,\r\n        scaleChange: false,\r\n        text: i18n.FATALITY_LINE\r\n    },\r\n    plot_doubling_time: {\r\n        subregions: false,\r\n        metricChange: true,\r\n        statsChange: false,\r\n        scaleChange: false,\r\n        movingAverage: true,\r\n        text: i18n.CASE_DOUBLING_TIME\r\n    },\r\n    plot_r0: {\r\n        subregions: false,\r\n        metricChange: false,\r\n        statsChange: false,\r\n        scaleChange: false,\r\n        movingAverage: true,\r\n        text: i18n.ESTIMATED_RO\r\n    },\r\n    plot_ranking: {\r\n        subregions: true,\r\n        metricChange: true,\r\n        statsChange: true,\r\n        scaleChange: false,\r\n        text: i18n.MOST_AFFECTED_SUBREGIONS\r\n    },\r\n    plot_subregion_basic: {\r\n        subregions: true,\r\n        metricChange: true,\r\n        statsChange: true,\r\n        scaleChange: true,\r\n        movingAverage: true,\r\n        text: i18n.SUBREGION\r\n    },\r\n    plot_subregion_shifted: {\r\n        subregions: true,\r\n        metricChange: true,\r\n        statsChange: true,\r\n        scaleChange: true,\r\n        movingAverage: true,\r\n        text: i18n.SUBREGION_SHIFTED\r\n    },\r\n    plot_subregion_stream: {\r\n        subregions: true,\r\n        metricChange: true,\r\n        statsChange: true,\r\n        scaleChange: false,\r\n        text: i18n.SUBREGION_STREAM\r\n    },\r\n    plot_subregion_active_stream: {\r\n        subregions: false,\r\n        metricChange: false,\r\n        statsChange: false,\r\n        scaleChange: false,\r\n        text: i18n.SUBREGION_ACTIVE_STREAM\r\n    },\r\n    plot_subregion_fatality: {\r\n        subregions: true,\r\n        metricChange: false,\r\n        statsChange: false,\r\n        scaleChange: false,\r\n        text: i18n.SUBREGION_FATALITY\r\n    }\r\n}\r\n\r\nexport const plotSpecificTypes = {\r\n    total: {\r\n        type: 'line',\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        yFormat: ',d',\r\n        log: true,\r\n        legendItemWidth: 100\r\n    },\r\n    new: {\r\n        type: 'line',\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        yFormat: ',d',\r\n        log: false,\r\n        legendItemWidth: 100\r\n    },\r\n    fatality_recovery: {\r\n        type: 'line',\r\n        yAxisFormat: '.2%',\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        yFormat: '.2%',\r\n        log: false,\r\n        legendItemWidth: 150\r\n    },\r\n    growth_total: {\r\n        type: 'line',\r\n        yAxisFormat: '.0%',\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        yFormat: '.2%',\r\n        log: false,\r\n        legendItemWidth: 50,\r\n        yScale: {\r\n            type: 'linear',\r\n            min: 0,\r\n            max: 1\r\n        }\r\n    },\r\n    growth_new: {\r\n        type: 'line',\r\n        yAxisFormat: '.0%',\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        yFormat: '.2%',\r\n        log: false,\r\n        legendItemWidth: 50,\r\n        yScale: {\r\n            type: 'linear',\r\n            min: -2,\r\n            max: 2\r\n        }\r\n    },\r\n    one_vs_rest: {\r\n        type: 'line',\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        log: true,\r\n        legendItemWidth: 150\r\n    },\r\n    one_vs_rest_new: {\r\n        type: 'line',\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        log: false,\r\n        legendItemWidth: 150\r\n    },\r\n    fatality_line: {\r\n        type: 'line',\r\n        xFormat: ',d',\r\n        yFormat: '.2%',\r\n        xScale: {\r\n            type: 'log',\r\n            min: 1,\r\n            max: 10 ** 9\r\n        },\r\n        yScale: {\r\n            type: 'linear',\r\n            min: 0,\r\n            max: 0.4\r\n        },\r\n        xAxisFormat: integerFormat,\r\n        yAxisFormat: '.0%',\r\n        legends: [],\r\n        hideMarkers: true,\r\n        pointSize: 4,\r\n        xTickValues: [ ...Array(10).keys() ].map((x) => 10 ** x),\r\n        yTickValues: [ 0, 0.1, 0.2, 0.3, 0.4 ],\r\n        xTickRotation: 0,\r\n        xLegend: i18n.INFECTION_NUMBER,\r\n        yLegend: i18n.FATALITY_RATE,\r\n        enablePointLabel: true,\r\n        enableSlices: false,\r\n        pointLabel: (x) => x.name,\r\n        tooltip: fatalityTooltip(i18n.FATALITY_RATE, i18n.INFECTION_NUMBER)\r\n    },\r\n    fatality_line2: {\r\n        type: 'line',\r\n        xFormat: ',d',\r\n        yFormat: ',d',\r\n        xScale: {\r\n            type: 'log',\r\n            min: 1,\r\n            max: 10 ** 9\r\n        },\r\n        yScale: {\r\n            type: 'log',\r\n            min: 1,\r\n            max: 10 ** 8\r\n        },\r\n        xAxisFormat: integerFormat,\r\n        yAxisFormat: integerFormat,\r\n        legends: [],\r\n        hideMarkers: true,\r\n        pointSize: 4,\r\n        xTickValues: [ ...Array(10).keys() ].map((x) => 10 ** x),\r\n        yTickValues: [ ...Array(9).keys() ].map((x) => 10 ** x),\r\n        xTickRotation: 0,\r\n        xLegend: i18n.INFECTION_NUMBER,\r\n        yLegend: i18n.DEATH_NUMBER,\r\n        enablePointLabel: true,\r\n        enableSlices: false,\r\n        pointLabel: (x) =>\r\n            x.name === '中东呼吸综合征'\r\n                ? `${x.name}${'　'.repeat(8)}`\r\n                : x.name === 'MERS' ? `${x.name}${'　'.repeat(3)}` : x.name,\r\n        tooltip: fatalityTooltip(i18n.DEATH_NUMBER, i18n.INFECTION_NUMBER)\r\n    },\r\n    fatality_line_only: {\r\n        type: 'line',\r\n        xFormat: ',d',\r\n        yFormat: '.2%',\r\n        xScale: {\r\n            type: 'log',\r\n            min: 'auto',\r\n            max: 'auto'\r\n        },\r\n        yScale: {\r\n            type: 'linear',\r\n            min: 'auto',\r\n            max: 'auto'\r\n        },\r\n        xAxisFormat: integerFormat,\r\n        yAxisFormat: '.2%',\r\n        legends: [],\r\n        hideMarkers: true,\r\n        pointSize: 4,\r\n        xTickValues: [ ...Array(10).keys() ].map((x) => 10 ** x),\r\n        xTickRotation: 0,\r\n        xLegend: i18n.INFECTION_NUMBER,\r\n        yLegend: i18n.FATALITY_RATE,\r\n        enablePointLabel: false,\r\n        enableSlices: false,\r\n        tooltip: fatalityTooltip(i18n.FATALITY_RATE, i18n.INFECTION_NUMBER)\r\n    },\r\n    fatality_line2_only: {\r\n        type: 'line',\r\n        xFormat: ',d',\r\n        yFormat: ',d',\r\n        xScale: {\r\n            type: 'log',\r\n            min: 'auto',\r\n            max: 'auto'\r\n        },\r\n        yScale: {\r\n            type: 'log',\r\n            min: 'auto',\r\n            max: 'auto'\r\n        },\r\n        xAxisFormat: integerFormat,\r\n        yAxisFormat: integerFormat,\r\n        legends: [],\r\n        hideMarkers: true,\r\n        pointSize: 4,\r\n        xTickValues: [ ...Array(10).keys() ].map((x) => 10 ** x),\r\n        yTickValues: [ ...Array(9).keys() ].map((x) => 10 ** x),\r\n        xTickRotation: 0,\r\n        xLegend: i18n.INFECTION_NUMBER,\r\n        yLegend: i18n.DEATH_NUMBER,\r\n        enablePointLabel: false,\r\n        enableSlices: false,\r\n        tooltip: fatalityTooltip(i18n.DEATH_NUMBER, i18n.INFECTION_NUMBER)\r\n    },\r\n    doubling_time: {\r\n        type: 'line',\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        yFormat: 'd',\r\n        log: false,\r\n        legendItemWidth: 50,\r\n        yLegend: i18n.CASE_DOUBLING_TIME_IN_DAYS,\r\n        enableSlices: false,\r\n        tooltip: ({ point }) => (\r\n            <div className=\"plot-tooltip plot-tooltip-line\">\r\n                <div>{formatDate(point.data.xFormatted, point.data.lang)}</div>\r\n                <div className=\"plot-tooltip-bold\">{` ${point.data.yFormatted} ${i18n.DAYS[point.data.lang]}`}</div>\r\n            </div>\r\n        )\r\n    },\r\n    r0: {\r\n        type: 'line',\r\n        yAxisFormat: 'd',\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        yFormat: '.2f',\r\n        log: false,\r\n        legends: [],\r\n        yLegend: i18n.ESTIMATED_RO_SEIR,\r\n        enableSlices: false,\r\n        tooltip: ({ point }) => (\r\n            <div className=\"plot-tooltip plot-tooltip-line\">\r\n                <div>{formatDate(point.data.xFormatted, point.data.lang)}</div>\r\n                <div>\r\n                    <span>R₀ ≈ </span>\r\n                    <span className=\"plot-tooltip-bold\">{point.data.yFormatted}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n    most_affected_subregions: {\r\n        type: 'bump',\r\n        log: false,\r\n        tooltip: ({ serie }) => (\r\n            <span className=\"plot-tooltip plot-tooltip-bump\" style={{ color: serie.color }}>\r\n                {serie.fullId}\r\n                <span className=\"plot-tooltip-bold\">{` ${serie.count}`}</span>\r\n            </span>\r\n        )\r\n    },\r\n    most_affected_subregions_new: {\r\n        type: 'bump',\r\n        log: false,\r\n        tooltip: ({ serie }) => (\r\n            <span className=\"plot-tooltip plot-tooltip-bump\" style={{ color: serie.color }}>\r\n                {serie.fullId}\r\n                <span className=\"plot-tooltip-bold\">{` ${serie.count}`}</span>\r\n            </span>\r\n        )\r\n    },\r\n    subregion_total: {\r\n        type: 'line',\r\n        margin: { right: 115, bottom: 30 },\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        yFormat: ',d',\r\n        log: true,\r\n        pointSize: 0,\r\n        enableSlices: false,\r\n        legends: [ regionLegends ],\r\n        tooltip: ({ point }) => (\r\n            <div className=\"plot-tooltip plot-tooltip-line\">\r\n                <div\r\n                    className=\"plot-tooltip-bold\"\r\n                    style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n                >\r\n                    <span>\r\n                        <div style={{ height: 12, width: 12, backgroundColor: point.color, marginRight: 5 }} />\r\n                    </span>\r\n                    <span>{point.serieId}</span>\r\n                </div>\r\n                <div>\r\n                    <span>{formatDate(point.data.xFormatted, point.data.lang)}</span>\r\n                    <span className=\"plot-tooltip-bold\">{` ${point.data.yFormatted}`}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n    subregion_new: {\r\n        type: 'line',\r\n        margin: { right: 115, bottom: 30 },\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: i18n.PLOT_DATE_FORMAT,\r\n        yFormat: ',d',\r\n        log: false,\r\n        pointSize: 0,\r\n        enableSlices: false,\r\n        legends: [ regionLegends ],\r\n        tooltip: ({ point }) => (\r\n            <div className=\"plot-tooltip plot-tooltip-line\">\r\n                <div\r\n                    className=\"plot-tooltip-bold\"\r\n                    style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n                >\r\n                    <span>\r\n                        <div style={{ height: 12, width: 12, backgroundColor: point.color, marginRight: 5 }} />\r\n                    </span>\r\n                    <span>{point.serieId}</span>\r\n                </div>\r\n                <div>\r\n                    <span>{formatDate(point.data.xFormatted, point.data.lang)}</span>\r\n                    <span className=\"plot-tooltip-bold\">{` ${point.data.yFormatted}`}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n    subregion_total_stream: {\r\n        type: 'stream',\r\n        yAxisFormat: absIntegerFormat,\r\n        xAxisFormat: streamTimeFormat,\r\n        log: false,\r\n        legends: [ regionLegends ]\r\n    },\r\n    subregion_new_stream: {\r\n        type: 'stream',\r\n        yAxisFormat: absIntegerFormat,\r\n        xAxisFormat: streamTimeFormat,\r\n        log: false,\r\n        legends: [ regionLegends ]\r\n    },\r\n    subregion_active_stream: {\r\n        type: 'stream',\r\n        yAxisFormat: absIntegerFormat,\r\n        xAxisFormat: streamTimeFormat,\r\n        log: false,\r\n        legends: [ regionLegends ]\r\n    },\r\n    subregion_fatality: {\r\n        type: 'line',\r\n        subregions: true,\r\n        log: false,\r\n        xLog: true,\r\n        margin: { left: 60 },\r\n        xFormat: ',d',\r\n        yFormat: '.2%',\r\n        xScale: {\r\n            type: 'log',\r\n            min: 1,\r\n            max: 10 ** 9\r\n        },\r\n        yScale: {\r\n            type: 'linear',\r\n            min: 0,\r\n            max: 0.4\r\n        },\r\n        xAxisFormat: integerFormat,\r\n        yAxisFormat: '.1%',\r\n        legends: [],\r\n        hideMarkers: true,\r\n        pointSize: 10,\r\n        pointBorderWidth: 2,\r\n        xTickValues: [ ...Array(10).keys() ].map((x) => 10 ** x),\r\n        yTickValues: [ 0, 0.1, 0.2, 0.3, 0.4 ],\r\n        xTickRotation: 0,\r\n        xLegend: i18n.CONFIRMED,\r\n        yLegend: i18n.FATALITY_RATE,\r\n        yLegendOffset: -50,\r\n        enablePointLabel: true,\r\n        enableSlices: false,\r\n        pointLabelYOffset: -10,\r\n        pointLabel: (x) => x.name,\r\n        tooltip: fatalityTooltip(i18n.FATALITY_RATE, i18n.CONFIRMED)\r\n    },\r\n    subregion_fatality2: {\r\n        type: 'line',\r\n        subregions: true,\r\n        log: false,\r\n        xLog: true,\r\n        xScale: {\r\n            type: 'log',\r\n            min: 1,\r\n            max: 10 ** 9\r\n        },\r\n        yScale: {\r\n            type: 'log',\r\n            min: 1,\r\n            max: 10 ** 8\r\n        },\r\n        margin: { left: 60 },\r\n        xFormat: ',d',\r\n        yFormat: ',d',\r\n        xAxisFormat: integerFormat,\r\n        yAxisFormat: integerFormat,\r\n        legends: [],\r\n        hideMarkers: true,\r\n        pointSize: 10,\r\n        pointBorderWidth: 2,\r\n        xTickValues: [ ...Array(10).keys() ].map((x) => 10 ** x),\r\n        yTickValues: [ ...Array(9).keys() ].map((x) => 10 ** x),\r\n        xTickRotation: 0,\r\n        xLegend: i18n.CONFIRMED,\r\n        yLegend: i18n.DEATHS,\r\n        yLegendOffset: -50,\r\n        enablePointLabel: true,\r\n        enableSlices: false,\r\n        pointLabelYOffset: -10,\r\n        pointLabel: (x) =>\r\n            x.name === '中东呼吸综合征'\r\n                ? `${x.name}${'　'.repeat(8)}`\r\n                : x.name === 'MERS' ? `${x.name}${'　'.repeat(3)}` : x.name,\r\n        tooltip: fatalityTooltip(i18n.DEATHS, i18n.CONFIRMED)\r\n    },\r\n    subregion_fatality_only: {\r\n        type: 'line',\r\n        subregions: true,\r\n        log: false,\r\n        xLog: true,\r\n        margin: { left: 60 },\r\n        xFormat: ',d',\r\n        yFormat: '.2%',\r\n        xAxisFormat: integerFormat,\r\n        yAxisFormat: '.1%',\r\n        legends: [],\r\n        hideMarkers: true,\r\n        pointSize: 10,\r\n        pointBorderWidth: 2,\r\n        xTickValues: [ ...Array(10).keys() ].map((x) => 10 ** x),\r\n        xTickRotation: 0,\r\n        xLegend: i18n.CONFIRMED,\r\n        yLegend: i18n.FATALITY_RATE,\r\n        yLegendOffset: -50,\r\n        enablePointLabel: false,\r\n        enableSlices: false,\r\n        tooltip: fatalityTooltip(i18n.FATALITY_RATE, i18n.CONFIRMED)\r\n    },\r\n    subregion_fatality2_only: {\r\n        type: 'line',\r\n        subregions: true,\r\n        log: false,\r\n        xLog: true,\r\n        yScale: {\r\n            type: 'log',\r\n            min: 'auto',\r\n            max: 'auto'\r\n        },\r\n        margin: { left: 60 },\r\n        xFormat: ',d',\r\n        yFormat: ',d',\r\n        xAxisFormat: integerFormat,\r\n        yAxisFormat: integerFormat,\r\n        legends: [],\r\n        hideMarkers: true,\r\n        pointSize: 10,\r\n        pointBorderWidth: 2,\r\n        xTickValues: [ ...Array(10).keys() ].map((x) => 10 ** x),\r\n        yTickValues: [ ...Array(9).keys() ].map((x) => 10 ** x),\r\n        xTickRotation: 0,\r\n        xLegend: i18n.CONFIRMED,\r\n        yLegend: i18n.DEATHS,\r\n        yLegendOffset: -50,\r\n        enablePointLabel: false,\r\n        enableSlices: false,\r\n        tooltip: fatalityTooltip(i18n.DEATHS, i18n.CONFIRMED)\r\n    },\r\n    subregion_total_shifted_100: {\r\n        type: 'line',\r\n        margin: { right: 115 },\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: 'd',\r\n        xFormat: 'd',\r\n        yFormat: ',d',\r\n        xScale: {\r\n            type: 'linear',\r\n            min: 'auto',\r\n            max: 'auto'\r\n        },\r\n        log: true,\r\n        pointSize: 0,\r\n        enableSlices: false,\r\n        legends: [ regionLegends ],\r\n        xLegend: i18n.DAYS_AFTER_100_CASES,\r\n        tooltip: ({ point }) => (\r\n            <div className=\"plot-tooltip plot-tooltip-line\">\r\n                <div\r\n                    className=\"plot-tooltip-bold\"\r\n                    style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n                >\r\n                    <span>\r\n                        <div style={{ height: 12, width: 12, backgroundColor: point.color, marginRight: 5 }} />\r\n                    </span>\r\n                    <span>{point.serieId}</span>\r\n                </div>\r\n                <div>\r\n                    <span>{`${i18n.DAY_0[point.data.lang].replace(0, point.data.x)} (${formatDate(\r\n                        point.data.date,\r\n                        point.data.lang\r\n                    )})`}</span>\r\n                    <span className=\"plot-tooltip-bold\">{` ${point.data.yFormatted}`}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n    subregion_new_shifted_100: {\r\n        type: 'line',\r\n        margin: { right: 115 },\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: 'd',\r\n        xFormat: 'd',\r\n        yFormat: ',d',\r\n        xScale: {\r\n            type: 'linear',\r\n            min: 'auto',\r\n            max: 'auto'\r\n        },\r\n        log: false,\r\n        pointSize: 0,\r\n        enableSlices: false,\r\n        legends: [ regionLegends ],\r\n        xLegend: i18n.DAYS_AFTER_100_CASES,\r\n        tooltip: ({ point }) => (\r\n            <div className=\"plot-tooltip plot-tooltip-line\">\r\n                <div\r\n                    className=\"plot-tooltip-bold\"\r\n                    style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n                >\r\n                    <span>\r\n                        <div style={{ height: 12, width: 12, backgroundColor: point.color, marginRight: 5 }} />\r\n                    </span>\r\n                    <span>{point.serieId}</span>\r\n                </div>\r\n                <div>\r\n                    <span>{`${i18n.DAY_0[point.data.lang].replace(0, point.data.x)} (${formatDate(\r\n                        point.data.date,\r\n                        point.data.lang\r\n                    )})`}</span>\r\n                    <span className=\"plot-tooltip-bold\">{` ${point.data.yFormatted}`}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n    subregion_total_shifted_10: {\r\n        type: 'line',\r\n        margin: { right: 115 },\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: 'd',\r\n        xFormat: 'd',\r\n        yFormat: ',d',\r\n        xScale: {\r\n            type: 'linear',\r\n            min: 'auto',\r\n            max: 'auto'\r\n        },\r\n        log: true,\r\n        pointSize: 0,\r\n        enableSlices: false,\r\n        legends: [ regionLegends ],\r\n        xLegend: i18n.DAYS_AFTER_10_CASES,\r\n        tooltip: ({ point }) => (\r\n            <div className=\"plot-tooltip plot-tooltip-line\">\r\n                <div\r\n                    className=\"plot-tooltip-bold\"\r\n                    style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n                >\r\n                    <span>\r\n                        <div style={{ height: 12, width: 12, backgroundColor: point.color, marginRight: 5 }} />\r\n                    </span>\r\n                    <span>{point.serieId}</span>\r\n                </div>\r\n                <div>\r\n                    <span>{`${i18n.DAY_0[point.data.lang].replace(0, point.data.x)} (${formatDate(\r\n                        point.data.date,\r\n                        point.data.lang\r\n                    )})`}</span>\r\n                    <span className=\"plot-tooltip-bold\">{` ${point.data.yFormatted}`}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    },\r\n    subregion_new_shifted_10: {\r\n        type: 'line',\r\n        margin: { right: 115 },\r\n        yAxisFormat: integerFormat,\r\n        xAxisFormat: 'd',\r\n        xFormat: 'd',\r\n        yFormat: ',d',\r\n        xScale: {\r\n            type: 'linear',\r\n            min: 'auto',\r\n            max: 'auto'\r\n        },\r\n        log: false,\r\n        pointSize: 0,\r\n        enableSlices: false,\r\n        legends: [ regionLegends ],\r\n        xLegend: i18n.DAYS_AFTER_10_CASES,\r\n        tooltip: ({ point }) => (\r\n            <div className=\"plot-tooltip plot-tooltip-line\">\r\n                <div\r\n                    className=\"plot-tooltip-bold\"\r\n                    style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n                >\r\n                    <span>\r\n                        <div style={{ height: 12, width: 12, backgroundColor: point.color, marginRight: 5 }} />\r\n                    </span>\r\n                    <span>{point.serieId}</span>\r\n                </div>\r\n                <div>\r\n                    <span>{`${i18n.DAY_0[point.data.lang].replace(0, point.data.x)} (${formatDate(\r\n                        point.data.date,\r\n                        point.data.lang\r\n                    )})`}</span>\r\n                    <span className=\"plot-tooltip-bold\">{` ${point.data.yFormatted}`}</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\r\nimport { FiMap } from 'react-icons/fi'\r\nimport 'flag-icon-css/css/flag-icon.min.css'\r\nimport { metricText } from '../utils/utils'\r\nimport { mapText } from '../utils/map_text'\r\nimport * as str from '../utils/strings'\r\nimport { plotTypes } from '../utils/plot_types'\r\n\r\nexport default class MapNavBar extends Component {\r\n    state = {\r\n        dropdownOpen: false,\r\n        height: -1\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateHeight()\r\n        window.addEventListener('resize', this.updateHeight)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateHeight)\r\n    }\r\n\r\n    updateHeight = () => {\r\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\r\n        this.setState({ height })\r\n    }\r\n\r\n    mapToggle = (map) => {\r\n        if (map !== this.props.currentMap) {\r\n            this.props.mapToggle(map)\r\n            if (map === str.CHINA_MAP1 || map === str.CHINA_MAP2) {\r\n                if (this.props.currentMap !== str.CHINA_MAP1 && this.props.currentMap !== str.CHINA_MAP2)\r\n                    this.props.regionToggle([ str.CHINA_ZH ], false)\r\n            } else if (map === str.US_MAP || map === str.US_MAP2) {\r\n                if (this.props.currentMap !== str.US_MAP && this.props.currentMap !== str.US_MAP2)\r\n                    this.props.regionToggle([ str.US_ZH ], false)\r\n            } else if (map === str.ITALY_MAP || map === str.ITALY_MAP2) {\r\n                if (this.props.currentMap !== str.ITALY_MAP && this.props.currentMap !== str.ITALY_MAP2)\r\n                    this.props.regionToggle([ str.ITALY_ZH ], false)\r\n            } else if (map === str.HONGKONG_MAP) {\r\n                this.props.regionToggle([ str.CHINA_ZH, str.HONGKONG_ZH ], false)\r\n            } else if (map !== str.TRANSMISSION) {\r\n                this.props.regionToggle([ mapText[map].regionName ], false)\r\n            }\r\n        }\r\n        this.setState({ dropdownOpen: !this.state.dropdownOpen })\r\n    }\r\n\r\n    metricToggle = (event) => {\r\n        const newMetric = event.target.getAttribute('value')\r\n        if (newMetric !== this.props.metric) this.props.metricToggle(newMetric)\r\n    }\r\n\r\n    render() {\r\n        const { lang, metric, currentMap, fullPlot, fullTree, plotType } = this.props\r\n\r\n        return (\r\n            <div className={`map-nav-bar-wrap ${fullPlot && !plotTypes[plotType].metricChange ? 'grey-out' : ''}`}>\r\n                <ul className=\"map-nav-bar\">\r\n                    {[ 'confirmedCount', 'deadCount', 'curedCount' ].map((count) => (\r\n                        <li key={`map-nav-${count}`} className={count === metric ? 'current' : ''}>\r\n                            <div value={count} onClick={this.metricToggle}>\r\n                                {metricText[count][lang]}\r\n                            </div>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n\r\n                {!fullPlot &&\r\n                !fullTree && (\r\n                    <UncontrolledDropdown className=\"map-toggle\">\r\n                        <DropdownToggle\r\n                            className=\"map-toggle-button\"\r\n                            tag=\"span\"\r\n                            data-toggle=\"dropdown\"\r\n                            aria-expanded={this.state.dropdownOpen}\r\n                        >\r\n                            <FiMap size={14} style={{ marginRight: 10 }} />\r\n                            <span>{mapText[currentMap].title[lang]}</span>\r\n                        </DropdownToggle>\r\n                        <DropdownMenu\r\n                            modifiers={{\r\n                                setMaxHeight: {\r\n                                    enabled: true,\r\n                                    order: 890,\r\n                                    fn: (data) => {\r\n                                        return {\r\n                                            ...data,\r\n                                            styles: {\r\n                                                ...data.styles,\r\n                                                overflowY: 'auto',\r\n                                                maxHeight: this.state.height * 0.5\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }}\r\n                        >\r\n                            {[\r\n                                'Global',\r\n                                'Asia',\r\n                                'Europe',\r\n                                'North America',\r\n                                'South America',\r\n                                'Oceania',\r\n                                'Africa',\r\n                                null\r\n                            ].map((continent) =>\r\n                                Object.keys(mapText)\r\n                                    .filter(\r\n                                        (map) =>\r\n                                            mapText[map].continent === continent ||\r\n                                            (mapText[map].continent && mapText[map].continent['en'] === continent)\r\n                                    )\r\n                                    .map((map, idx) => {\r\n                                        return (\r\n                                            <Fragment key={`map-${idx}`}>\r\n                                                {map === str.TRANSMISSION ? <DropdownItem divider /> : <div />}\r\n                                                {idx === 0 && continent != null && continent !== 'Global' ? (\r\n                                                    <Fragment>\r\n                                                        <DropdownItem divider />\r\n                                                        <DropdownItem header>\r\n                                                            {mapText[map].continent[lang]}\r\n                                                        </DropdownItem>\r\n                                                    </Fragment>\r\n                                                ) : (\r\n                                                    <div />\r\n                                                )}\r\n                                                <DropdownItem\r\n                                                    className={currentMap === map ? 'current' : ''}\r\n                                                    onClick={() => this.mapToggle(map)}\r\n                                                >\r\n                                                    {map !== str.TRANSMISSION && (\r\n                                                        <span\r\n                                                            className={`flag-icon ${mapText[map].flagCode\r\n                                                                ? 'flag-icon-' + mapText[map].flagCode\r\n                                                                : ''}`}\r\n                                                        />\r\n                                                    )}\r\n                                                    {mapText[map].title[lang]}\r\n                                                </DropdownItem>\r\n                                            </Fragment>\r\n                                        )\r\n                                    })\r\n                            )}\r\n                        </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { Slider, Rail, Handles, Tracks, Ticks } from 'react-compound-slider'\r\nimport format from 'date-fns/format'\r\nimport { scaleTime } from 'd3-scale'\r\nimport { timeDay } from 'd3-time'\r\nimport { parseDate, isoDate } from '../utils/utils'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nfunction formatTick(ms, lang) {\r\n    return format(new Date(ms), i18n.DATE_FORMAT_1[lang])\r\n}\r\n\r\nexport default class DateSlider extends Component {\r\n    render() {\r\n        const {\r\n            date,\r\n            lang,\r\n            startDate,\r\n            endDate,\r\n            handleDateChange,\r\n            handleTempDateChange,\r\n            fullMap,\r\n            fullPlot,\r\n            plotDates\r\n        } = this.props\r\n        let min = parseDate(startDate)\r\n        const max = parseDate(endDate)\r\n        min = new Date(min.getTime() + 1000 * 60 * (max.getTimezoneOffset() - min.getTimezoneOffset()))\r\n\r\n        const numberOfDays = (max - min) / (1000 * 3600 * 24)\r\n        const dateTicksInterval = Math.round(numberOfDays / (!fullMap ? 10 : 15))\r\n\r\n        const dateTicks = scaleTime()\r\n            .domain([ min, max ])\r\n            .ticks(\r\n                // hack to fix unwanted behavior (https://github.com/d3/d3/issues/2240)\r\n                timeDay.filter(function(d) {\r\n                    return timeDay.count(0, d) % dateTicksInterval === 0\r\n                })\r\n            )\r\n            .map((d) => +d)\r\n\r\n        let values = !fullPlot ? [ date ] : plotDates\r\n        values = values.map((x) => {\r\n            let d = parseDate(x)\r\n            d = new Date(d.getTime() + 1000 * 60 * (max.getTimezoneOffset() - d.getTimezoneOffset()))\r\n            return +d\r\n        })\r\n\r\n        return (\r\n            <Slider\r\n                className=\"date-slider\"\r\n                mode={1}\r\n                step={1000 * 60 * 60 * 24}\r\n                domain={[ +min, +max ]}\r\n                onChange={(time) => {\r\n                    if (!fullPlot) handleDateChange(isoDate(time[0], endDate).slice(0, 10))\r\n                }}\r\n                onUpdate={handleTempDateChange}\r\n                values={values}\r\n            >\r\n                <Rail>\r\n                    {({ getRailProps }) => (\r\n                        <Fragment>\r\n                            <div className=\"date-slider-rail-outer\" {...getRailProps()} />\r\n                            <div className=\"date-slider-rail-inner\" />\r\n                        </Fragment>\r\n                    )}\r\n                </Rail>\r\n                <Handles>\r\n                    {({ handles, getHandleProps }) => (\r\n                        <div>\r\n                            {handles.map((handle, index) => (\r\n                                <Fragment key={`handle-${index}`}>\r\n                                    <div\r\n                                        className=\"date-slider-handle-outer\"\r\n                                        style={{\r\n                                            left: `${handle.percent}%`\r\n                                        }}\r\n                                        {...getHandleProps(handle.id)}\r\n                                    />\r\n                                    <div\r\n                                        role=\"slider\"\r\n                                        className=\"date-slider-handle-inner\"\r\n                                        // eslint-disable-next-line\r\n                                        aria-valuemin={+min}\r\n                                        // eslint-disable-next-line\r\n                                        aria-valuemax={+max}\r\n                                        aria-valuenow={handle.value}\r\n                                        style={{\r\n                                            left: `${handle.percent}%`\r\n                                        }}\r\n                                    />\r\n                                </Fragment>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </Handles>\r\n                <Tracks left={!fullPlot} right={false}>\r\n                    {({ tracks, getTrackProps }) => (\r\n                        <div>\r\n                            {tracks.map(({ id, source, target }) => (\r\n                                <div\r\n                                    key={`track-${id}`}\r\n                                    className=\"date-slider-track\"\r\n                                    style={{\r\n                                        left: `${source.percent}%`,\r\n                                        width: `${target.percent - source.percent}%`\r\n                                    }}\r\n                                    {...getTrackProps()}\r\n                                />\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </Tracks>\r\n                <Ticks values={dateTicks}>\r\n                    {({ ticks }) => (\r\n                        <div>\r\n                            {ticks.map((tick, index) => (\r\n                                <div key={`tick-${index}`}>\r\n                                    <div\r\n                                        className=\"date-slider-tick\"\r\n                                        style={{\r\n                                            left: `${tick.percent}%`\r\n                                        }}\r\n                                    />\r\n                                    <div\r\n                                        className=\"date-slider-tick-text\"\r\n                                        style={{\r\n                                            marginLeft: `${-(100 / ticks.length) / 2}%`,\r\n                                            width: `${100 / ticks.length}%`,\r\n                                            left: `${tick.percent}%`\r\n                                        }}\r\n                                    >\r\n                                        {formatTick(tick.value, lang)}\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    )}\r\n                </Ticks>\r\n            </Slider>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { MdPause, MdPlayArrow, MdChevronLeft, MdChevronRight } from 'react-icons/md'\r\nimport { nextDay, previousDay } from '../utils/utils'\r\n\r\nexport default class AminationController extends Component {\r\n    animationLoop = () =>\r\n        setTimeout(() => {\r\n            if (this.props.playing) {\r\n                this.dateForward()\r\n                this.animationLoop()\r\n            }\r\n        }, 500)\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.playing) this.animationLoop()\r\n    }\r\n\r\n    shouldComponentUpdate(prevProps, prevState) {\r\n        return !this.props.playing\r\n    }\r\n\r\n    dateForward = () => {\r\n        const { date, startDate, endDate, plotDates, fullPlot, handleDateChange } = this.props\r\n        if (!fullPlot) {\r\n            handleDateChange(nextDay(date, startDate, endDate))\r\n        } else {\r\n            handleDateChange(nextDay(date, plotDates[0], plotDates[1]))\r\n        }\r\n    }\r\n\r\n    dateBackward = () => {\r\n        const { date, startDate, endDate, plotDates, fullPlot, handleDateChange } = this.props\r\n        if (!fullPlot) {\r\n            handleDateChange(previousDay(date, startDate, endDate))\r\n        } else {\r\n            handleDateChange(previousDay(date, plotDates[0], plotDates[1]))\r\n        }\r\n    }\r\n\r\n    startAnimation = () => this.props.playingToggle()\r\n\r\n    stopAnimation = () => {\r\n        this.props.playingToggle()\r\n        this.forceUpdate()\r\n    }\r\n\r\n    render() {\r\n        const { playing } = this.props\r\n        return (\r\n            <div className=\"anime-ctrl\">\r\n                <div className={`anime-ctrl-left-right ${playing ? 'anime-ctrl-playing' : ''}`}>\r\n                    <MdChevronLeft size={30} onClick={this.dateBackward} />\r\n                </div>\r\n                <div className=\"anime-ctrl-play\">\r\n                    {playing ? (\r\n                        <MdPause size={30} onClick={this.stopAnimation} />\r\n                    ) : (\r\n                        <MdPlayArrow size={30} onClick={this.startAnimation} />\r\n                    )}\r\n                </div>\r\n                <div className={`anime-ctrl-left-right ${playing ? 'anime-ctrl-playing' : ''}`}>\r\n                    <MdChevronRight size={30} onClick={this.dateForward} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { metricText, getDataFromRegion, previousDay } from '../utils/utils'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nexport default class MainCounts extends Component {\r\n    render() {\r\n        const { data, currentRegion, date, lang, fullPlot, fullTree } = this.props\r\n        if (data == null) return <div />\r\n\r\n        return (\r\n            <div className=\"counts-wrap\">\r\n                {!fullPlot &&\r\n                    !fullTree &&\r\n                    [ 'confirmedCount', 'deadCount', 'curedCount' ].map((metric) => {\r\n                        const count =\r\n                            Object.keys(getDataFromRegion(data, currentRegion)[metric]).length > 0\r\n                                ? getDataFromRegion(data, currentRegion)[metric][date]\r\n                                : '—'\r\n                        const preDate = previousDay(date, '2019-09-01', '2050-01-01')\r\n\r\n                        const preCount =\r\n                            Object.keys(getDataFromRegion(data, currentRegion)[metric]).length > 0\r\n                                ? getDataFromRegion(data, currentRegion)[metric][preDate]\r\n                                : 0\r\n                        let diff = 0\r\n                        if (parseInt(count) != null && parseInt(preCount) != null)\r\n                            diff = parseInt(count) - parseInt(preCount)\r\n\r\n                        return (\r\n                            <div key={`${metric}-number`} className=\"count-wrap\">\r\n                                <div className=\"count\">{count ? count.toLocaleString() : 0}</div>\r\n                                <div className=\"count-title\">{metricText[metric][lang]}</div>\r\n                                <div className=\"count-daily\">\r\n                                    {diff != null &&\r\n                                    !isNaN(diff) && (\r\n                                        <span>{`${i18n.NEWCASE[lang]} ${diff >= 0 ? '+' : ''}${diff.toLocaleString()}`}</span>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { MdArrowDropDownCircle } from 'react-icons/md'\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\r\nimport { plotTypes } from '../utils/plot_types'\r\nimport { getDataFromRegion } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nexport default class PlotSelector extends Component {\r\n    state = {\r\n        dropdownOpen: false,\r\n        height: -1\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateHeight()\r\n        window.addEventListener('resize', this.updateHeight)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateHeight)\r\n    }\r\n\r\n    updateHeight = () => {\r\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\r\n        this.setState({ height })\r\n    }\r\n\r\n    render() {\r\n        const { currentPlotType, currentRegion, lang, data, onPlotTypeChange } = this.props\r\n        const plotParameters = plotTypes[currentPlotType]\r\n        const currentRegionIsGlobal = currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH\r\n        const hasSubregions = Object.keys(getDataFromRegion(data, currentRegion)).length > 4 || currentRegionIsGlobal\r\n\r\n        return (\r\n            <UncontrolledDropdown className=\"\">\r\n                <DropdownToggle\r\n                    tag=\"span\"\r\n                    className=\"line-plot-title\"\r\n                    data-toggle=\"dropdown\"\r\n                    aria-expanded={this.state.dropdownOpen}\r\n                >\r\n                    <span>{plotParameters.text[lang]}</span>\r\n                    <MdArrowDropDownCircle size={20} className=\"dropdown-arrow\" />\r\n                </DropdownToggle>\r\n                <DropdownMenu\r\n                    modifiers={{\r\n                        setMaxHeight: {\r\n                            enabled: true,\r\n                            order: 890,\r\n                            fn: (data) => {\r\n                                return {\r\n                                    ...data,\r\n                                    styles: {\r\n                                        ...data.styles,\r\n                                        overflowY: 'auto',\r\n                                        maxHeight: this.state.height * 0.6\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }}\r\n                >\r\n                    {Object.keys(plotTypes).map(\r\n                        (plotType) =>\r\n                            // no One-vs-Rest comparison plot when current region is Global\r\n                            plotType === 'plot_one_vs_rest' && currentRegionIsGlobal ? (\r\n                                <div key={`dropdown-${plotType}`} />\r\n                            ) : plotTypes[plotType].subregions && !hasSubregions ? (\r\n                                <div key={`dropdown-${plotType}`} />\r\n                            ) : (\r\n                                <Fragment key={`dropdown-${plotType}`}>\r\n                                    {plotType === 'plot_basic' &&\r\n                                    hasSubregions && <DropdownItem header>{i18n.OVERALL[lang]}</DropdownItem>}\r\n                                    {plotType === 'plot_ranking' && hasSubregions && <DropdownItem divider />}\r\n                                    {plotType === 'plot_ranking' &&\r\n                                    hasSubregions && <DropdownItem header>{i18n.SUBREGIONS[lang]}</DropdownItem>}\r\n                                    <DropdownItem\r\n                                        className={currentPlotType === plotType ? 'current' : ''}\r\n                                        onClick={() => {\r\n                                            onPlotTypeChange(plotType)\r\n                                            this.setState({\r\n                                                dropdownOpen: !this.state.dropdownOpen\r\n                                            })\r\n                                        }}\r\n                                    >\r\n                                        {plotTypes[plotType].text[lang]}\r\n                                    </DropdownItem>\r\n                                </Fragment>\r\n                            )\r\n                    )}\r\n                </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Button, ButtonGroup } from 'reactstrap'\r\n\r\nexport default class RadioButton extends Component {\r\n    render() {\r\n        const { title, texts, selected, onSelect, alwaysShow, disabled } = this.props\r\n\r\n        return (\r\n            <div\r\n                className={`plot-nav-bar-btn ${disabled ? 'grey-out' : ''}`}\r\n                style={alwaysShow ? { display: 'flex' } : {}}\r\n            >\r\n                <div className=\"plot-nav-bar-btn-title\">{title}</div>\r\n                <ButtonGroup>\r\n                    {Object.keys(texts).map((x) => (\r\n                        <Button\r\n                            className=\"radio-btn\"\r\n                            key={x}\r\n                            color=\"secondary\"\r\n                            onClick={() => onSelect(x)}\r\n                            active={selected === x}\r\n                        >\r\n                            {texts[x]}\r\n                        </Button>\r\n                    ))}\r\n                </ButtonGroup>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport RadioButton from './RadioButton'\r\nimport i18n from '../data/i18n.yml'\r\nimport { plotTypes, plotSpecificTypes } from '../utils/plot_types'\r\n\r\nexport default class PlotNavBar extends Component {\r\n    render() {\r\n        const { plotType, plotSpecificType, lang, onSelect, plotDetails, scale, scaleToggle } = this.props\r\n        return (\r\n            <div className=\"plot-nav-bar\">\r\n                {plotTypes[plotType].statsChange && (\r\n                    <RadioButton\r\n                        title={i18n.TYPE[lang]}\r\n                        texts={{ cumulative: i18n.CUMULATIVE[lang], daily: i18n.DAILY[lang] }}\r\n                        selected={plotDetails.stats}\r\n                        onSelect={(s) => onSelect('stats', s)}\r\n                        alwaysShow={true}\r\n                    />\r\n                )}\r\n                {(plotType === 'plot_fatality_line' || plotType === 'plot_subregion_fatality') && (\r\n                    <RadioButton\r\n                        title={i18n.Y_AXIS[lang]}\r\n                        texts={{ rate: i18n.RATE[lang], deaths: i18n.DEATH_NUMBER2[lang] }}\r\n                        selected={plotDetails.fatalityLine}\r\n                        onSelect={(s) => onSelect('fatalityLine', s)}\r\n                    />\r\n                )}\r\n                {(plotType === 'plot_fatality_line' || plotType === 'plot_subregion_fatality') && (\r\n                    <RadioButton\r\n                        title={i18n.COMPARISONS[lang]}\r\n                        texts={{ show: i18n.SHOW[lang], hide: i18n.HIDE[lang] }}\r\n                        selected={plotDetails.diseaseComparison}\r\n                        onSelect={(s) => onSelect('diseaseComparison', s)}\r\n                    />\r\n                )}\r\n                {plotType === 'plot_subregion_shifted' && (\r\n                    <RadioButton\r\n                        title={i18n.DAY_0[lang]}\r\n                        texts={{ 10: i18n.TEN_CASES[lang], 100: i18n.HUNDRED_CASES[lang] }}\r\n                        selected={plotDetails.shifted}\r\n                        onSelect={(s) => onSelect('shifted', s)}\r\n                    />\r\n                )}\r\n                {plotTypes[plotType].scaleChange && (\r\n                    <RadioButton\r\n                        title={i18n.SCALE[lang]}\r\n                        texts={{ linear: i18n.LINEAR_SCALE[lang], log: i18n.LOG_SCALE[lang] }}\r\n                        selected={scale}\r\n                        onSelect={(s) => scaleToggle(s)}\r\n                        disabled={plotSpecificTypes[plotSpecificType].log ? false : true}\r\n                    />\r\n                )}\r\n                {plotSpecificTypes[plotSpecificType].type === 'stream' && (\r\n                    <RadioButton\r\n                        title={i18n.Y_AXIS[lang]}\r\n                        texts={{ expand: i18n.PERCENT[lang], silhouette: i18n.CASE_NUMBERS[lang] }}\r\n                        selected={plotDetails.stream}\r\n                        onSelect={(s) => onSelect('stream', s)}\r\n                    />\r\n                )}\r\n                {plotType === 'plot_fatality_recovery' && (\r\n                    <RadioButton\r\n                        title={i18n.RECOVERY_RATE[lang]}\r\n                        texts={{ show: i18n.SHOW[lang], hide: i18n.HIDE[lang] }}\r\n                        selected={plotDetails.recoveryRate}\r\n                        onSelect={(s) => onSelect('recoveryRate', s)}\r\n                    />\r\n                )}\r\n                {plotTypes[plotType].movingAverage && (\r\n                    <RadioButton\r\n                        title={i18n.MOVING_AVERAGE[lang]}\r\n                        texts={{ '1d': '—', '3d': i18n.THREE_DAYS[lang], '5d': i18n.FIVE_DAYS[lang] }}\r\n                        selected={plotDetails.movingAverage}\r\n                        onSelect={(s) => onSelect('movingAverage', s)}\r\n                    />\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { ResponsiveLine } from '@nivo/line'\r\nimport { isMobile, isIPad13 } from 'react-device-detect'\r\nimport { parseDate } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\nimport us_map from '../data/us_map.yml'\r\n\r\nexport default class LinePlot extends Component {\r\n    render() {\r\n        const {\r\n            currentRegion,\r\n            fullPlot,\r\n            darkMode,\r\n            scale,\r\n            lang,\r\n            playing,\r\n            tempDate,\r\n            startDate,\r\n            endDate,\r\n            plotParameters,\r\n            plotDataAll,\r\n            tickValues,\r\n            plotTheme,\r\n            currentMap\r\n        } = this.props\r\n\r\n        if (plotParameters.type !== 'line') return <div />\r\n\r\n        return (\r\n            <ResponsiveLine\r\n                margin={{\r\n                    top: 20,\r\n                    right: 20,\r\n                    bottom: !fullPlot ? 60 : 80,\r\n                    left: 50,\r\n                    ...plotParameters.margin\r\n                }}\r\n                theme={plotTheme}\r\n                animate={\r\n                    fullPlot ||\r\n                    currentMap !== str.US_MAP2 ||\r\n                    (currentMap === str.US_MAP2 && currentRegion.length >= 2 && currentRegion[1] in us_map)\r\n                }\r\n                data={plotDataAll.plotData}\r\n                colors={(d) => d.color}\r\n                xFormat={plotParameters.xFormat != null ? plotParameters.xFormat : 'time:%Y-%m-%d'}\r\n                yFormat={plotParameters.yFormat}\r\n                xScale={\r\n                    plotParameters.xScale != null ? (\r\n                        plotParameters.xScale\r\n                    ) : !plotParameters.xLog ? (\r\n                        {\r\n                            type: 'time',\r\n                            format: '%Y-%m-%d',\r\n                            precision: 'day',\r\n                            useUTC: false\r\n                        }\r\n                    ) : (\r\n                        {\r\n                            type: 'log',\r\n                            min: plotDataAll.logTickMin,\r\n                            max: plotDataAll.logTickMax\r\n                        }\r\n                    )\r\n                }\r\n                yScale={\r\n                    plotParameters.yScale != null ? (\r\n                        plotParameters.yScale\r\n                    ) : scale === 'linear' || !plotParameters.log ? (\r\n                        {\r\n                            type: 'linear',\r\n                            max: 'auto',\r\n                            min: 'auto'\r\n                        }\r\n                    ) : (\r\n                        {\r\n                            type: 'log',\r\n                            min: plotDataAll.logTickMin,\r\n                            max: plotDataAll.logTickMax\r\n                        }\r\n                    )\r\n                }\r\n                axisLeft={{\r\n                    orient: 'left',\r\n                    // do not show ticks with non-integer values\r\n                    format: plotParameters.yAxisFormat,\r\n                    tickSize: 0,\r\n                    tickValues: plotParameters.yTickValues != null ? plotParameters.yTickValues : tickValues,\r\n                    legend: plotParameters.yLegend != null ? plotParameters.yLegend[lang] : '',\r\n                    legendOffset: plotParameters.yLegendOffset != null ? plotParameters.yLegendOffset : -40,\r\n                    legendPosition: 'middle'\r\n                }}\r\n                axisBottom={{\r\n                    orient: 'bottom',\r\n                    format:\r\n                        Object(plotParameters.xAxisFormat) !== plotParameters.xAxisFormat\r\n                            ? plotParameters.xAxisFormat\r\n                            : plotParameters.xAxisFormat[lang],\r\n                    tickValues: plotParameters.xTickValues != null ? plotParameters.xTickValues : !fullPlot ? 5 : 10,\r\n                    tickRotation:\r\n                        plotParameters.xTickRotation != null ? plotParameters.xTickRotation : !fullPlot ? 0 : -30,\r\n                    legend: plotParameters.xLegend != null ? plotParameters.xLegend[lang] : '',\r\n                    legendOffset: 40,\r\n                    legendPosition: 'middle'\r\n                }}\r\n                enableGridX={false}\r\n                gridYValues={plotParameters.yTickValues != null ? plotParameters.yTickValues : tickValues}\r\n                pointSize={plotParameters.pointSize != null ? plotParameters.pointSize : 6}\r\n                pointBorderWidth={plotParameters.pointBorderWidth}\r\n                pointBorderColor={darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)'}\r\n                useMesh={true}\r\n                enableArea={false}\r\n                enablePointLabel={plotParameters.enablePointLabel}\r\n                pointLabel={plotParameters.pointLabel}\r\n                pointLabelYOffset={plotParameters.pointLabelYOffset ? plotParameters.pointLabelYOffset : -6}\r\n                enableSlices={plotParameters.enableSlices != null ? plotParameters.enableSlices : 'x'}\r\n                curve={'monotoneX'}\r\n                tooltip={plotParameters.tooltip}\r\n                markers={\r\n                    plotParameters.hideMarkers ? (\r\n                        []\r\n                    ) : !playing && tempDate !== startDate && tempDate !== endDate ? (\r\n                        [\r\n                            {\r\n                                axis: 'x',\r\n                                value: parseDate(tempDate),\r\n                                lineStyle: {\r\n                                    stroke: darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)',\r\n                                    strokeWidth: 1,\r\n                                    strokeDasharray: '6 6'\r\n                                }\r\n                            }\r\n                        ]\r\n                    ) : (\r\n                        []\r\n                    )\r\n                }\r\n                legends={\r\n                    plotParameters.legends != null ? (\r\n                        plotParameters.legends\r\n                    ) : (\r\n                        [\r\n                            {\r\n                                anchor: 'bottom',\r\n                                direction: 'row',\r\n                                justify: false,\r\n                                translateX: 0,\r\n                                translateY: !fullPlot ? 50 : 70,\r\n                                itemsSpacing: 10,\r\n                                itemDirection: 'left-to-right',\r\n                                itemWidth: plotParameters.legendItemWidth,\r\n                                itemHeight: 20,\r\n                                itemOpacity: 0.75,\r\n                                symbolSize: 12,\r\n                                symbolShape: 'circle',\r\n                                symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n                                effects: []\r\n                            }\r\n                        ]\r\n                    )\r\n                }\r\n                onClick={({ serieId, data }) => {\r\n                    if (isMobile || isIPad13) return\r\n                    if (!plotParameters.subregions || serieId == null || data.noClick) return\r\n                    this.props.regionToggle(\r\n                        currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH\r\n                            ? [ serieId ]\r\n                            : [ ...currentRegion, serieId ]\r\n                    )\r\n                }}\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { ResponsiveStream } from '@nivo/stream'\r\n\r\nexport default class StreamPlot extends Component {\r\n    render() {\r\n        const { darkMode, plotParameters, plotDataAll, plotTheme, offsetType, fullPlot } = this.props\r\n\r\n        if (plotParameters.type !== 'stream') return <div />\r\n\r\n        let colors = (d) =>\r\n            darkMode\r\n                ? [ 0, 1, 2, 3, 4, 5 ].map((x) => `var(--primary-color-${x})`)[\r\n                      plotDataAll.plotKeys.length - 1 - d.index\r\n                  ]\r\n                : [ 8, 6, 5, 4, 3, 2 ].map((x) => `var(--primary-color-${x})`)[\r\n                      plotDataAll.plotKeys.length - 1 - d.index\r\n                  ]\r\n\r\n        if (fullPlot) {\r\n            colors = (d) =>\r\n                darkMode\r\n                    ? [ ...Array(10).keys() ].map((x) => `var(--primary-color-${x})`)[\r\n                          plotDataAll.plotKeys.length - 1 - d.index\r\n                      ]\r\n                    : [ ...Array(10).keys() ].reverse().map((x) => `var(--primary-color-${x})`)[\r\n                          plotDataAll.plotKeys.length - 1 - d.index\r\n                      ]\r\n        }\r\n\r\n        return (\r\n            <ResponsiveStream\r\n                data={plotDataAll.plotData}\r\n                keys={plotDataAll.plotKeys}\r\n                theme={plotTheme}\r\n                curve=\"monotoneX\"\r\n                margin={{ top: 20, right: 115, bottom: 35, left: 40 }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    orient: 'bottom',\r\n                    tickSize: 0,\r\n                    tickPadding: 5,\r\n                    tickRotation: !fullPlot ? 0 : -30,\r\n                    format: (idx) => {\r\n                        const n = !fullPlot ? 5 : 10\r\n                        return plotParameters.xAxisFormat(\r\n                            idx,\r\n                            Math.round(plotDataAll.plotData.length / n),\r\n                            plotDataAll.dates\r\n                        )\r\n                    }\r\n                }}\r\n                axisLeft={{\r\n                    orient: 'left',\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    tickValues: 5,\r\n                    format: offsetType !== 'expand' ? plotParameters.yAxisFormat : '.0%'\r\n                }}\r\n                offsetType={offsetType}\r\n                colors={colors}\r\n                fillOpacity={0.85}\r\n                animate={false}\r\n                enableGridX={false}\r\n                enableGridY={true}\r\n                legends={plotParameters.legends}\r\n                isInteractive={true}\r\n                enableStackTooltip={true}\r\n                tooltipFormat={(x) => <b>{x.value}</b>}\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { ResponsiveBump } from '@nivo/bump'\r\nimport { isMobile, isIPad13 } from 'react-device-detect'\r\nimport * as str from '../utils/strings'\r\n\r\nexport default class BumpPlot extends Component {\r\n    render() {\r\n        const { currentRegion, plotParameters, plotDataAll, plotTheme } = this.props\r\n\r\n        if (plotParameters.type !== 'bump') return <div />\r\n\r\n        return (\r\n            <ResponsiveBump\r\n                data={plotDataAll.plotData}\r\n                theme={plotTheme}\r\n                margin={{ top: 10, right: 100, bottom: 20, left: 50 }}\r\n                colors={(d) => d.color}\r\n                lineWidth={2}\r\n                activeLineWidth={4}\r\n                inactiveLineWidth={2}\r\n                inactiveOpacity={0.15}\r\n                pointSize={0}\r\n                activePointSize={0}\r\n                inactivePointSize={0}\r\n                pointBorderWidth={3}\r\n                activePointBorderWidth={3}\r\n                enableGridX={false}\r\n                enableGridY={false}\r\n                axisRight={null}\r\n                axisTop={null}\r\n                axisBottom={null}\r\n                axisLeft={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0\r\n                }}\r\n                onClick={(serie) => {\r\n                    if (isMobile || isIPad13) return\r\n                    this.props.regionToggle(\r\n                        currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH\r\n                            ? [ serie.name ]\r\n                            : [ ...currentRegion, serie.name ]\r\n                    )\r\n                }}\r\n                tooltip={plotParameters.tooltip}\r\n            />\r\n        )\r\n    }\r\n}\r\n","import { getDataFromRegion, metricText, parseDate, simplifyName } from './utils'\r\nimport * as str from './strings'\r\nimport { plotSpecificTypes } from './plot_types'\r\nimport i18n from '../data/i18n.yml'\r\nimport diseases from '../data/other_diseases_stats.yml'\r\n\r\nexport const generatePlotData = (params) => generatePlotDataFunc[params.plotSpecificType](params)\r\n\r\nconst metricColors = {\r\n    confirmedCount: 'var(--primary-color-4)',\r\n    deadCount: 'var(--primary-color-10)',\r\n    curedCount: 'var(--primary-color-2)'\r\n}\r\n\r\nconst metricColorsDark = {\r\n    confirmedCount: 'var(--primary-color-4)',\r\n    deadCount: 'var(--lighter-grey)',\r\n    curedCount: 'var(--primary-color-2)'\r\n}\r\n\r\nconst generatePlotDataTotal = (\r\n    { data, date, currentRegion, lang, darkMode, playing, scale, plotSpecificType, plotDetails, plotDates, fullPlot },\r\n    fullData = false\r\n) => {\r\n    let maxValue = 0\r\n    let minValue = 100000\r\n\r\n    let plotData = [ 'deadCount', 'curedCount', 'confirmedCount' ].map((metric) => {\r\n        const counts = getDataFromRegion(data, currentRegion)[metric]\r\n        return {\r\n            id: metricText[metric][lang],\r\n            color: darkMode ? metricColorsDark[metric] : metricColors[metric],\r\n            data: Object.keys(counts)\r\n                .sort((a, b) => (parseDate(a) > parseDate(b) ? 1 : -1))\r\n                .filter((d) => !playing || parseDate(d) <= parseDate(date))\r\n                .map((d) => {\r\n                    if (counts[d] > maxValue) maxValue = counts[d]\r\n                    if (counts[d] < minValue) minValue = counts[d]\r\n\r\n                    return scale === 'linear' || counts[d] > 0\r\n                        ? {\r\n                              x: d,\r\n                              y: counts[d]\r\n                          }\r\n                        : null\r\n                })\r\n                .filter((x) => x != null)\r\n        }\r\n    })\r\n\r\n    plotData = calcMovingAverage(plotData, plotDetails.movingAverage)\r\n    if (!fullData) plotData = applyDateRange(plotData, plotDates)\r\n\r\n    return { plotData, ...getTickValues(scale, plotSpecificType, fullPlot, minValue, maxValue) }\r\n}\r\n\r\nconst generatePlotDataNew = (params, fullData = false) => {\r\n    let { plotData } = generatePlotDataTotal(params, true)\r\n\r\n    plotData = convertTotalToNew(plotData)\r\n    if (!fullData) plotData = applyDateRange(plotData, params.plotDates)\r\n\r\n    return { plotData }\r\n}\r\n\r\nconst generatePlotDataGrowthRate = (params) => {\r\n    let { plotData } =\r\n        params.plotSpecificType !== 'growth_new'\r\n            ? generatePlotDataTotal(params, true)\r\n            : generatePlotDataNew(params, true)\r\n    const metric = params.metric\r\n\r\n    plotData.forEach((metricData) => {\r\n        metricData.data = metricData.data.reduce(\r\n            (s, v, i) => [\r\n                ...s,\r\n                metricData.data[i - 1] && metricData.data[i - 1].y > 0\r\n                    ? { ...v, y: (v.y - metricData.data[i - 1].y) / metricData.data[i - 1].y }\r\n                    : { ...v, y: 0 }\r\n            ],\r\n            []\r\n        )\r\n    })\r\n\r\n    if (metric === 'confirmedCount') plotData = [ plotData[2] ]\r\n    if (metric === 'curedCount') plotData = [ plotData[1] ]\r\n    if (metric === 'deadCount') plotData = [ plotData[0] ]\r\n\r\n    plotData = applyDateRange(plotData, params.plotDates)\r\n\r\n    return { plotData }\r\n}\r\n\r\nconst generatePlotDataDoublingTime = (params) => {\r\n    // set scale to log: temporary hack to remove zeros\r\n    let { plotData } = generatePlotDataGrowthRate({ ...params, scale: 'log' })\r\n\r\n    plotData[0].data = plotData[0].data\r\n        .map((point) => ({\r\n            ...point,\r\n            y: point.y > 0 ? Math.log(2) / Math.log(point.y + 1) : null,\r\n            lang: params.lang\r\n        }))\r\n        .filter((point) => point.y != null && point.y < 1000) // remove outliers\r\n\r\n    return { plotData }\r\n}\r\n\r\nconst generatePlotDataR0 = (params) => {\r\n    // set scale to log: temporary hack to remove zeros\r\n    let { plotData } = generatePlotDataGrowthRate({ ...params, metric: 'confirmedCount', scale: 'log' })\r\n\r\n    const t_incubation = 5\r\n    const t_infectious = 5\r\n\r\n    // based on SEIR model\r\n    // R0 = (1 + lambda * t_incubation) * (1 + lambda * t_infectious)\r\n    plotData[0].data = plotData[0].data\r\n        .map((point) => ({\r\n            ...point,\r\n            y: (1 + Math.log(point.y + 1) * t_incubation) * (1 + Math.log(point.y + 1) * t_infectious),\r\n            lang: params.lang\r\n        }))\r\n        .filter((point) => point.y < 20) // remove outliers\r\n\r\n    return { plotData }\r\n}\r\n\r\nconst generatePlotDataRate = ({ data, currentRegion, darkMode, lang, date, playing, plotDetails, plotDates }) => {\r\n    const confirmedCounts = getDataFromRegion(data, currentRegion)['confirmedCount']\r\n\r\n    const metrics = plotDetails.recoveryRate === 'show' ? [ 'deadCount', 'curedCount' ] : [ 'deadCount' ]\r\n    let plotData = metrics.map((metric) => {\r\n        const counts = getDataFromRegion(data, currentRegion)[metric]\r\n        const newMetric = metric === 'deadCount' ? 'fatalityRate' : 'recoveryRate'\r\n        return {\r\n            id: metricText[newMetric][lang],\r\n            color: darkMode ? metricColorsDark[metric] : metricColors[metric],\r\n            data: Object.keys(counts)\r\n                .filter((d) => !playing || parseDate(d) <= parseDate(date))\r\n                .map((d) => ({ d, count: confirmedCounts[d] > 0 ? counts[d] / confirmedCounts[d] : 0 }))\r\n                .map(({ d, count }) => {\r\n                    return {\r\n                        x: d,\r\n                        y: count\r\n                    }\r\n                })\r\n        }\r\n    })\r\n\r\n    plotData = calcMovingAverage(plotData, plotDetails.movingAverage)\r\n    plotData = applyDateRange(plotData, plotDates)\r\n\r\n    return { plotData }\r\n}\r\n\r\nconst generatePlotDataOneVsRest = ({\r\n    data,\r\n    currentRegion,\r\n    metric,\r\n    lang,\r\n    date,\r\n    playing,\r\n    scale,\r\n    plotSpecificType,\r\n    plotDetails,\r\n    plotDates,\r\n    fullPlot\r\n}) => {\r\n    let maxValue = 0\r\n    let minValue = 100000\r\n\r\n    const currentData = getDataFromRegion(data, currentRegion)\r\n    const counts = currentData[metric]\r\n    let regionName = lang === 'zh' ? currentRegion[currentRegion.length - 1] : currentData.ENGLISH\r\n    regionName = simplifyName(regionName, lang)\r\n\r\n    const parentRegion =\r\n        currentRegion.length === 1 ? [ str.GLOBAL_ZH ] : currentRegion.slice(0, currentRegion.length - 1)\r\n    const parentData = getDataFromRegion(data, parentRegion)\r\n    const parentCounts = parentData[metric]\r\n    let parentRegionName = lang === 'zh' ? parentRegion[parentRegion.length - 1] : parentData.ENGLISH\r\n    parentRegionName = simplifyName(parentRegionName, lang)\r\n\r\n    let plotData = []\r\n\r\n    const parentPlotData = {\r\n        id: lang === 'zh' ? `${parentRegionName} (${i18n.REST[lang]})` : `${i18n.REST[lang]} of ${parentRegionName}`,\r\n        color: 'var(--primary-color-4)',\r\n        data: Object.keys(parentCounts)\r\n            .filter((d) => !playing || parseDate(d) <= parseDate(date))\r\n            .map((d) => {\r\n                if (counts[d] == null) return null\r\n\r\n                if (parentCounts[d] - counts[d] > maxValue) maxValue = parentCounts[d] - counts[d]\r\n                if (parentCounts[d] - counts[d] < minValue) minValue = parentCounts[d] - counts[d]\r\n\r\n                return scale === 'linear' || parentCounts[d] - counts[d] > 0\r\n                    ? {\r\n                          x: d,\r\n                          y: parentCounts[d] - counts[d]\r\n                      }\r\n                    : null\r\n            })\r\n            .filter((x) => x != null)\r\n    }\r\n\r\n    const currentPlotData = {\r\n        id: regionName,\r\n        color: 'var(--primary-color-2)',\r\n        data: Object.keys(counts)\r\n            .filter((d) => !playing || parseDate(d) <= parseDate(date))\r\n            .map((d) => {\r\n                if (parentCounts[d] == null) return null\r\n\r\n                if (counts[d] > maxValue) maxValue = counts[d]\r\n                if (counts[d] < minValue) minValue = counts[d]\r\n\r\n                return scale === 'linear' || counts[d] > 0\r\n                    ? {\r\n                          x: d,\r\n                          y: counts[d]\r\n                      }\r\n                    : null\r\n            })\r\n            .filter((x) => x != null)\r\n    }\r\n\r\n    plotData.push(parentPlotData)\r\n    plotData.push(currentPlotData)\r\n    if (plotSpecificType === 'one_vs_rest_new') {\r\n        plotData = convertTotalToNew(plotData)\r\n    }\r\n\r\n    plotData = calcMovingAverage(plotData, plotDetails.movingAverage)\r\n    plotData = applyDateRange(plotData, plotDates)\r\n\r\n    return { plotData, ...getTickValues(scale, plotSpecificType, fullPlot, minValue, maxValue) }\r\n}\r\n\r\nconst generatePlotDataSubregionRankings = ({\r\n    data,\r\n    currentRegion,\r\n    metric,\r\n    lang,\r\n    darkMode,\r\n    playing,\r\n    date,\r\n    plotDates,\r\n    plotSpecificType\r\n}) => {\r\n    const currentData = getCurrentData(data, currentRegion)\r\n    const subregions = playing\r\n        ? getSubregions(data, currentRegion, metric, 10)\r\n        : getSubregions(data, currentRegion, metric, 10, date)\r\n\r\n    let regionIndices = {}\r\n    let dates = []\r\n\r\n    let plotData = subregions\r\n        .map((region, i) => {\r\n            dates = [ ...dates, ...Object.keys(currentData[region][metric]) ]\r\n            dates = [ ...new Set(dates) ]\r\n            regionIndices[region] = i\r\n            return region\r\n        })\r\n        .map((region, i) => {\r\n            const id = lang === 'zh' ? region : currentData[region].ENGLISH\r\n            const dd = Object.keys(currentData[region][metric])\r\n                .sort((a, b) => (parseDate(a) > parseDate(b) ? 1 : -1))\r\n                .filter((d) => parseDate(d) <= parseDate(date))\r\n                .filter((d) => parseDate(d) <= parseDate(plotDates[1]) && parseDate(d) >= parseDate(plotDates[0]))\r\n            const counts = dd.map((d) => currentData[region][metric][d])\r\n            let count = counts[counts.length - 1]\r\n            if (plotSpecificType === 'most_affected_subregions_new')\r\n                count =\r\n                    counts.length >= 2\r\n                        ? counts[counts.length - 1] - counts[counts.length - 2]\r\n                        : counts[counts.length - 1]\r\n            return {\r\n                id: simplifyName(id, lang),\r\n                fullId: id,\r\n                name: region,\r\n                color: darkMode ? `var(--primary-color-${i < 7 ? i : i + 1})` : `var(--primary-color-${10 - i})`,\r\n                count,\r\n                data: []\r\n            }\r\n        })\r\n\r\n    dates = dates.sort((a, b) => (parseDate(a) > parseDate(b) ? 1 : -1))\r\n\r\n    let regionSkipped = {}\r\n    dates\r\n        .filter((d) => parseDate(d) <= parseDate(date))\r\n        .filter((d) => parseDate(d) <= parseDate(plotDates[1]) && parseDate(d) >= parseDate(plotDates[0]))\r\n        .forEach((d, i) => {\r\n            let regionCounts = []\r\n            plotData.forEach((region) => {\r\n                let counts = currentData[region.name][metric][d] ? currentData[region.name][metric][d] : 0\r\n                if (plotSpecificType === 'most_affected_subregions_new') {\r\n                    if (i > 0 && currentData[region.name][metric][dates[i - 1]])\r\n                        counts = counts - currentData[region.name][metric][dates[i - 1]]\r\n                }\r\n                regionCounts.push({\r\n                    region: region.name,\r\n                    counts\r\n                })\r\n            })\r\n            regionCounts = regionCounts.sort((a, b) => (a.counts <= b.counts ? 1 : -1))\r\n\r\n            regionCounts.forEach((region, i) => {\r\n                if (region.counts === 0 && regionSkipped[region.region] == null) {\r\n                    plotData[regionIndices[region.region]].data.push({\r\n                        x: d,\r\n                        y: null\r\n                    })\r\n                } else {\r\n                    regionSkipped[region.region] = true\r\n                    plotData[regionIndices[region.region]].data.push({\r\n                        x: d,\r\n                        y: i + 1\r\n                    })\r\n                }\r\n            })\r\n        })\r\n\r\n    return { plotData, dates }\r\n}\r\n\r\nconst generatePlotDataSubregionStream = ({\r\n    data,\r\n    currentRegion,\r\n    lang,\r\n    playing,\r\n    date,\r\n    plotDates,\r\n    metric,\r\n    plotSpecificType,\r\n    fullPlot\r\n}) => {\r\n    const currentData = getCurrentData(data, currentRegion)\r\n    let dates = []\r\n    let plotData = []\r\n\r\n    const sortBy = plotSpecificType === 'subregion_active_stream' ? 'confirmedCount' : metric\r\n    const numOfRegions = !fullPlot ? 5 : 9\r\n    let subregionsData = getSubregions(data, currentRegion, sortBy, numOfRegions)\r\n        .map((region) => {\r\n            dates = [ ...dates, ...Object.keys(currentData[region]['confirmedCount']) ]\r\n            dates = [ ...new Set(dates) ]\r\n            return region\r\n        })\r\n        .map((region) => {\r\n            const id = lang === 'zh' ? region : currentData[region].ENGLISH\r\n            return {\r\n                id: simplifyName(id, lang),\r\n                fullId: id,\r\n                name: region\r\n            }\r\n        })\r\n\r\n    let plotKeys = subregionsData.map((x) => x.id)\r\n\r\n    // at least (numOfRegions + 1) subregions\r\n    if (Object.keys(currentData).length >= numOfRegions + 5) plotKeys = [ ...plotKeys, i18n.OTHERS[lang] ]\r\n    plotKeys = plotKeys.reverse()\r\n\r\n    dates = dates.sort((a, b) => (parseDate(a) > parseDate(b) ? 1 : -1))\r\n    dates = dates.filter((d) => parseDate(d) <= parseDate(plotDates[1]) && parseDate(d) >= parseDate(plotDates[0]))\r\n\r\n    // no subregions\r\n    if (subregionsData.length === 0) {\r\n        dates = Object.keys(currentData['confirmedCount']).sort((a, b) => (parseDate(a) > parseDate(b) ? 1 : -1))\r\n        let id = lang === 'zh' ? currentRegion[currentRegion.length - 1] : currentData.ENGLISH\r\n        id = simplifyName(id, lang)\r\n        plotKeys = [ id ]\r\n    }\r\n\r\n    dates.filter((d) => !playing || parseDate(d) <= parseDate(date)).forEach((d, i) => {\r\n        let subregionCounts = {}\r\n        subregionsData.forEach((region) => {\r\n            if (plotSpecificType === 'subregion_active_stream') {\r\n                const confirmedCount = currentData[region.name]['confirmedCount'][d]\r\n                    ? currentData[region.name]['confirmedCount'][d]\r\n                    : 0\r\n                const deadCount = currentData[region.name]['deadCount'][d]\r\n                    ? currentData[region.name]['deadCount'][d]\r\n                    : 0\r\n                const curedCount = currentData[region.name]['curedCount'][d]\r\n                    ? currentData[region.name]['curedCount'][d]\r\n                    : 0\r\n                const remainingConfirmed = Math.max(confirmedCount - deadCount - curedCount, 0)\r\n                subregionCounts[region.id] = remainingConfirmed\r\n            } else {\r\n                let count = currentData[region.name][metric][d] ? currentData[region.name][metric][d] : 0\r\n                if (plotSpecificType === 'subregion_new_stream' && currentData[region.name][metric][dates[i - 1]])\r\n                    count -= currentData[region.name][metric][dates[i - 1]]\r\n                subregionCounts[region.id] = count\r\n            }\r\n        })\r\n\r\n        let otherConfirmedCount = 0\r\n        let otherDeadCount = 0\r\n        let otherCuredCount = 0\r\n\r\n        // compute number of remaining confirmed cases from non-top-5 subregions\r\n        Object.keys(currentData)\r\n            .filter(\r\n                (region) => ![ 'confirmedCount', 'deadCount', 'curedCount', 'ENGLISH', str.GLOBAL_ZH ].includes(region)\r\n            )\r\n            .filter((region) => !subregionsData.map((x) => x.name).includes(region))\r\n            .forEach((region) => {\r\n                const confirmedCount = currentData[region]['confirmedCount'][d]\r\n                    ? currentData[region]['confirmedCount'][d]\r\n                    : 0\r\n                const deadCount = currentData[region]['deadCount'][d] ? currentData[region]['deadCount'][d] : 0\r\n                const curedCount = currentData[region]['curedCount'][d] ? currentData[region]['curedCount'][d] : 0\r\n                otherConfirmedCount += confirmedCount\r\n                otherDeadCount += deadCount\r\n                otherCuredCount += curedCount\r\n                if (plotSpecificType === 'subregion_new_stream') {\r\n                    const confirmedCountPrevious = currentData[region]['confirmedCount'][dates[i - 1]]\r\n                        ? currentData[region]['confirmedCount'][dates[i - 1]]\r\n                        : 0\r\n                    const deadCountPrevious = currentData[region]['deadCount'][dates[i - 1]]\r\n                        ? currentData[region]['deadCount'][dates[i - 1]]\r\n                        : 0\r\n                    const curedCountPrevious = currentData[region]['curedCount'][dates[i - 1]]\r\n                        ? currentData[region]['curedCount'][dates[i - 1]]\r\n                        : 0\r\n                    otherConfirmedCount -= confirmedCountPrevious\r\n                    otherDeadCount -= deadCountPrevious\r\n                    otherCuredCount -= curedCountPrevious\r\n                }\r\n            })\r\n        let otherCount = 0\r\n        if (metric === 'confirmedCount') otherCount = Math.max(otherConfirmedCount, 0)\r\n        if (metric === 'deadCount') otherCount = Math.max(otherDeadCount, 0)\r\n        if (metric === 'curedCount') otherCount = Math.max(otherCuredCount, 0)\r\n        if (plotSpecificType === 'subregion_active_stream')\r\n            otherCount = Math.max(otherConfirmedCount - otherDeadCount - otherCuredCount, 0)\r\n\r\n        if (Object.keys(currentData).length >= 10) subregionCounts[i18n.OTHERS[lang]] = otherCount\r\n\r\n        // no subregions\r\n        if (subregionsData.length === 0) {\r\n            const confirmedCount = currentData['confirmedCount'][d] ? currentData['confirmedCount'][d] : 0\r\n            const deadCount = currentData['deadCount'][d] ? currentData['deadCount'][d] : 0\r\n            const curedCount = currentData['curedCount'][d] ? currentData['curedCount'][d] : 0\r\n            const remainingConfirmed = Math.max(confirmedCount - deadCount - curedCount, 0)\r\n            let id = lang === 'zh' ? currentRegion[currentRegion.length - 1] : currentData.ENGLISH\r\n            id = simplifyName(id, lang)\r\n            subregionCounts[id] =\r\n                plotSpecificType === 'subregion_active_stream'\r\n                    ? remainingConfirmed\r\n                    : Math.max(currentData[metric][d] ? currentData[metric][d] : 0, 0)\r\n        }\r\n        plotData.push(subregionCounts)\r\n    })\r\n    return { plotData, dates, plotKeys }\r\n}\r\n\r\nconst generatePlotDataFatalityLine = ({ data, currentRegion, date, darkMode, lang, plotSpecificType, plotDates }) => {\r\n    const confirmedCount = getDataFromRegion(data, currentRegion)['confirmedCount']\r\n    const deadCount = getDataFromRegion(data, currentRegion)['deadCount']\r\n    const plotData = [\r\n        {\r\n            id: 'fatality-line',\r\n            color: darkMode ? 'var(--primary-color-2)' : 'var(--primary-color-5)',\r\n            data: Object.keys(confirmedCount)\r\n                .filter(\r\n                    (d) =>\r\n                        parseDate(d) <= parseDate(date) &&\r\n                        confirmedCount[d] > 0 &&\r\n                        (deadCount[d] > 0 ||\r\n                            plotSpecificType === 'fatality_line' ||\r\n                            plotSpecificType === 'fatality_line_only')\r\n                )\r\n                .filter((d) => parseDate(d) <= parseDate(plotDates[1]) && parseDate(d) >= parseDate(plotDates[0]))\r\n                .map((d) => ({ d, cfr: deadCount[d] != null ? deadCount[d] / confirmedCount[d] : 0 }))\r\n                .map(({ d, cfr }) => {\r\n                    return {\r\n                        x: confirmedCount[d],\r\n                        y:\r\n                            plotSpecificType === 'fatality_line' || plotSpecificType === 'fatality_line_only'\r\n                                ? cfr\r\n                                : deadCount[d],\r\n                        date: d,\r\n                        lang\r\n                    }\r\n                })\r\n        }\r\n    ]\r\n    if (plotSpecificType === 'fatality_line' || plotSpecificType === 'fatality_line2')\r\n        Object.keys(diseases).forEach((x) => {\r\n            plotData.push({\r\n                id: x,\r\n                color: 'var(--light-grey)',\r\n                data: [\r\n                    {\r\n                        x: diseases[x].confirmedCount,\r\n                        y:\r\n                            plotSpecificType === 'fatality_line'\r\n                                ? diseases[x].deadCount / diseases[x].confirmedCount\r\n                                : diseases[x].deadCount,\r\n                        lang,\r\n                        name: diseases[x][lang],\r\n                        years: diseases[x].years\r\n                    }\r\n                ]\r\n            })\r\n        })\r\n    return { plotData }\r\n}\r\n\r\nconst generatePlotDataSubregionFatality = ({ data, currentRegion, date, lang, darkMode, plotSpecificType }) => {\r\n    const currentData = getCurrentData(data, currentRegion)\r\n    let plotData = []\r\n    let maxValue = 0\r\n    let minValue = 100000\r\n\r\n    getSubregions(data, currentRegion)\r\n        .reverse()\r\n        .filter(\r\n            (region) =>\r\n                currentData[region]['confirmedCount'][date] > 0 &&\r\n                currentData[region]['deadCount'][date] >= 0 &&\r\n                (currentData[region]['deadCount'][date] > 0 ||\r\n                    plotSpecificType === 'subregion_fatality' ||\r\n                    plotSpecificType === 'subregion_fatality_only')\r\n        )\r\n        .forEach((region, i) => {\r\n            const confirmedCount = currentData[region].confirmedCount[date]\r\n            const deadCount = currentData[region].deadCount[date]\r\n            maxValue = Math.max(maxValue, confirmedCount)\r\n            minValue = Math.min(minValue, confirmedCount)\r\n\r\n            plotData.push({\r\n                id: region,\r\n                color: darkMode ? 'rgba(222,73,104,0.6)' : 'rgba(183,55,121,0.5)',\r\n                data: [\r\n                    {\r\n                        x: confirmedCount,\r\n                        y:\r\n                            plotSpecificType === 'subregion_fatality' || plotSpecificType === 'subregion_fatality_only'\r\n                                ? deadCount / confirmedCount\r\n                                : deadCount,\r\n                        regionName: lang === 'zh' ? region : currentData[region].ENGLISH,\r\n                        lang\r\n                    }\r\n                ]\r\n            })\r\n        })\r\n\r\n    if (plotSpecificType === 'subregion_fatality' || plotSpecificType === 'subregion_fatality2')\r\n        Object.keys(diseases).forEach((x) => {\r\n            plotData.push({\r\n                id: x,\r\n                color: 'rgba(0,0,0,0)',\r\n                data: [\r\n                    {\r\n                        x: diseases[x].confirmedCount,\r\n                        y:\r\n                            plotSpecificType === 'subregion_fatality'\r\n                                ? diseases[x].deadCount / diseases[x].confirmedCount\r\n                                : diseases[x].deadCount,\r\n                        lang,\r\n                        name: diseases[x][lang],\r\n                        years: diseases[x].years,\r\n                        noClick: true\r\n                    }\r\n                ]\r\n            })\r\n        })\r\n\r\n    const { logTickMin, logTickMax } = getLogTickValues(minValue, maxValue)\r\n\r\n    return { plotData, logTickMin, logTickMax }\r\n}\r\n\r\nconst generatePlotDataSubregion = ({\r\n    data,\r\n    date,\r\n    currentRegion,\r\n    lang,\r\n    darkMode,\r\n    playing,\r\n    scale,\r\n    metric,\r\n    plotSpecificType,\r\n    plotDetails,\r\n    plotDates,\r\n    fullPlot\r\n}) => {\r\n    const currentData = getCurrentData(data, currentRegion)\r\n    let maxValue = 0\r\n    let minValue = 100000\r\n\r\n    const numOfRegions = !fullPlot ? 6 : 10\r\n    const subregions = playing\r\n        ? getSubregions(data, currentRegion, metric, numOfRegions)\r\n        : getSubregions(data, currentRegion, metric, numOfRegions, date)\r\n\r\n    let plotData = subregions\r\n        .map((region, i) => {\r\n            const counts = currentData[region][metric]\r\n            const id = lang === 'zh' ? region : currentData[region].ENGLISH\r\n            return {\r\n                id: simplifyName(id, lang),\r\n                fullId: id,\r\n                name: region,\r\n                color: darkMode ? `var(--primary-color-${i < 7 ? i : i + 1})` : `var(--primary-color-${10 - i})`,\r\n                data: Object.keys(counts)\r\n                    .filter((d) => !playing || parseDate(d) <= parseDate(date))\r\n                    .map((d) => {\r\n                        if (counts[d] > maxValue) maxValue = counts[d]\r\n                        if (counts[d] < minValue) minValue = counts[d]\r\n\r\n                        return scale === 'linear' || counts[d] > 0\r\n                            ? {\r\n                                  x: d,\r\n                                  y: counts[d],\r\n                                  lang\r\n                              }\r\n                            : null\r\n                    })\r\n                    .filter((x) => x != null)\r\n            }\r\n        })\r\n        .reverse()\r\n\r\n    if ([ 'subregion_new', 'subregion_new_shifted_10', 'subregion_new_shifted_100' ].includes(plotSpecificType))\r\n        plotData = convertTotalToNew(plotData)\r\n\r\n    plotData = calcMovingAverage(plotData, plotDetails.movingAverage)\r\n    plotData = applyDateRange(plotData, plotDates)\r\n\r\n    return { plotData, ...getTickValues(scale, plotSpecificType, fullPlot, minValue, maxValue) }\r\n}\r\n\r\nconst generatePlotDataSubregionShifted = (params) => {\r\n    const { scale, plotSpecificType, plotDetails, fullPlot } = params\r\n\r\n    let { plotData } = generatePlotDataSubregion(params)\r\n\r\n    const shifted = parseInt(plotDetails.shifted, 10)\r\n    let maxValue = 0\r\n    let minValue = 100000\r\n    plotData.forEach((x) => {\r\n        const firstIdx = x.data.findIndex((point) => point.y >= shifted)\r\n\r\n        if (firstIdx === -1) {\r\n            x.data = []\r\n        } else {\r\n            x.data = x.data.slice(firstIdx).map((point, i) => ({\r\n                ...point,\r\n                date: point.x,\r\n                x: i\r\n            }))\r\n        }\r\n\r\n        maxValue = x.data.reduce((s, point) => Math.max(s, point.y), maxValue)\r\n        minValue = x.data.reduce((s, point) => Math.min(s, point.y), minValue)\r\n    })\r\n\r\n    plotData = plotData.filter((x) => x.data.length > 0)\r\n\r\n    return { plotData, ...getTickValues(scale, plotSpecificType, fullPlot, minValue, maxValue) }\r\n}\r\n\r\nconst getCurrentData = (data, currentRegion) => {\r\n    const currentData =\r\n        currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH ? data : getDataFromRegion(data, currentRegion)\r\n\r\n    return currentData\r\n}\r\n\r\n// convert cumulative dataset to daily increasement dataset\r\nconst convertTotalToNew = (plotData) => {\r\n    plotData.forEach((metricData) => {\r\n        metricData.data = metricData.data.reduce(\r\n            (s, v, i) => [ ...s, metricData.data[i - 1] ? { ...v, y: v.y - metricData.data[i - 1].y } : v ],\r\n            []\r\n        )\r\n    })\r\n\r\n    return plotData\r\n}\r\n\r\n// moving averages\r\nconst calcMovingAverage = (plotData, days) => {\r\n    if (days === '3d') {\r\n        plotData.forEach((metricData) => {\r\n            metricData.data = metricData.data.reduce((s, v, i) => {\r\n                let newY = v.y\r\n                if (metricData.data[i - 1] && metricData.data[i + 1]) {\r\n                    newY = (metricData.data[i - 1].y + v.y + metricData.data[i + 1].y) / 3\r\n                }\r\n                return [ ...s, { ...v, y: newY } ]\r\n            }, [])\r\n        })\r\n    } else if (days === '5d') {\r\n        plotData.forEach((metricData) => {\r\n            metricData.data = metricData.data.reduce((s, v, i) => {\r\n                let newY = v.y\r\n                if (\r\n                    metricData.data[i - 1] &&\r\n                    metricData.data[i - 2] &&\r\n                    metricData.data[i + 1] &&\r\n                    metricData.data[i + 2]\r\n                ) {\r\n                    newY =\r\n                        (metricData.data[i - 2].y +\r\n                            metricData.data[i - 1].y +\r\n                            v.y +\r\n                            metricData.data[i + 1].y +\r\n                            metricData.data[i + 2].y) /\r\n                        5\r\n                } else if (metricData.data[i - 1] && metricData.data[i + 1]) {\r\n                    newY = (metricData.data[i - 1].y + v.y + metricData.data[i + 1].y) / 3\r\n                }\r\n                return [ ...s, { ...v, y: newY } ]\r\n            }, [])\r\n        })\r\n    }\r\n\r\n    return plotData\r\n}\r\n\r\n// apply date range\r\nconst applyDateRange = (plotData, plotDates) => {\r\n    plotData.forEach((p) => {\r\n        p.data = p.data.filter(\r\n            (x) => parseDate(x.x) <= parseDate(plotDates[1]) && parseDate(x.x) >= parseDate(plotDates[0])\r\n        )\r\n    })\r\n\r\n    return plotData\r\n}\r\n\r\n// data from top N subregions\r\nconst getSubregions = (data, currentRegion, metric = 'confirmedCount', topN = null, date = null) => {\r\n    const currentData = getCurrentData(data, currentRegion)\r\n\r\n    const subregions = Object.keys(currentData)\r\n        .filter((region) => ![ 'confirmedCount', 'deadCount', 'curedCount', 'ENGLISH', str.GLOBAL_ZH ].includes(region))\r\n        .sort((a, b) => {\r\n            let aCounts = Math.max(...Object.values(currentData[a][metric]))\r\n            let bCounts = Math.max(...Object.values(currentData[b][metric]))\r\n            if (date != null) {\r\n                aCounts = currentData[a][metric][date] ? currentData[a][metric][date] : 0\r\n                bCounts = currentData[b][metric][date] ? currentData[b][metric][date] : 0\r\n            }\r\n\r\n            return aCounts <= bCounts ? 1 : -1\r\n        })\r\n\r\n    // top affected subregions\r\n    return topN != null\r\n        ? subregions.filter(\r\n              (region, i) => i <= topN - 1 && Math.max(...Object.values(currentData[region][metric])) !== 0\r\n          )\r\n        : subregions\r\n}\r\n\r\nconst getLogTickValues = (minValue, maxValue) => {\r\n    const logTickMin = minValue <= maxValue ? Math.max(10 ** Math.floor(Math.log10(minValue)), 1) : 1\r\n    const logTickMax = minValue <= maxValue ? Math.max(10 ** Math.ceil(Math.log10(maxValue)), 10) : 1\r\n    const tickValues = [ ...Array(Math.log10(logTickMax / logTickMin) + 1).keys() ].map((x) => 10 ** x * logTickMin)\r\n\r\n    return { tickValues, logTickMin, logTickMax }\r\n}\r\n\r\nconst getTickValues = (scale, plotSpecificType, fullPlot, minValue, maxValue) => {\r\n    return scale === 'log' && plotSpecificTypes[plotSpecificType].log\r\n        ? getLogTickValues(minValue, maxValue)\r\n        : { tickValues: fullPlot ? 10 : 5, logTickMin: 1, logTickMax: 1 }\r\n}\r\n\r\nconst generatePlotDataFunc = {\r\n    total: generatePlotDataTotal,\r\n    new: generatePlotDataNew,\r\n    growth_total: generatePlotDataGrowthRate,\r\n    growth_new: generatePlotDataGrowthRate,\r\n    fatality_recovery: generatePlotDataRate,\r\n    one_vs_rest: generatePlotDataOneVsRest,\r\n    one_vs_rest_new: generatePlotDataOneVsRest,\r\n    most_affected_subregions: generatePlotDataSubregionRankings,\r\n    most_affected_subregions_new: generatePlotDataSubregionRankings,\r\n    subregion_active_stream: generatePlotDataSubregionStream,\r\n    fatality_line: generatePlotDataFatalityLine,\r\n    fatality_line2: generatePlotDataFatalityLine,\r\n    fatality_line_only: generatePlotDataFatalityLine,\r\n    fatality_line2_only: generatePlotDataFatalityLine,\r\n    doubling_time: generatePlotDataDoublingTime,\r\n    r0: generatePlotDataR0,\r\n    subregion_fatality: generatePlotDataSubregionFatality,\r\n    subregion_fatality2: generatePlotDataSubregionFatality,\r\n    subregion_fatality_only: generatePlotDataSubregionFatality,\r\n    subregion_fatality2_only: generatePlotDataSubregionFatality,\r\n    subregion_total: generatePlotDataSubregion,\r\n    subregion_new: generatePlotDataSubregion,\r\n    subregion_total_stream: generatePlotDataSubregionStream,\r\n    subregion_new_stream: generatePlotDataSubregionStream,\r\n    subregion_total_shifted_100: generatePlotDataSubregionShifted,\r\n    subregion_new_shifted_100: generatePlotDataSubregionShifted,\r\n    subregion_total_shifted_10: generatePlotDataSubregionShifted,\r\n    subregion_new_shifted_10: generatePlotDataSubregionShifted\r\n}\r\n","import React, { Component } from 'react'\r\nimport { AiOutlineFullscreen, AiOutlineFullscreenExit } from 'react-icons/ai'\r\nimport { isMobile, isIPad13 } from 'react-device-detect'\r\nimport PlotSelector from './PlotSelector'\r\nimport PlotNavBar from './PlotNavBar'\r\nimport LinePlot from './LinePlot'\r\nimport StreamPlot from './StreamPlot'\r\nimport BumpPlot from './BumpPlot'\r\nimport { generatePlotData } from '../utils/plot_data'\r\nimport { getDataFromRegion } from '../utils/utils'\r\nimport { plotTypes, plotSpecificTypes, getSpecificPlotType } from '../utils/plot_types'\r\nimport * as str from '../utils/strings'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nconst plotTheme = (darkMode, fullMode) => {\r\n    return {\r\n        fontFamily: 'Saira, sans-serif',\r\n        fontSize: fullMode ? 14 : 11,\r\n        textColor: darkMode ? 'var(--lighter-grey)' : 'black',\r\n        grid: {\r\n            line: {\r\n                stroke: darkMode ? 'var(--darkest-grey)' : 'var(--lighter-grey)'\r\n            }\r\n        },\r\n        tooltip: {\r\n            container: {\r\n                background: darkMode ? 'var(--darkest-grey)' : 'white',\r\n                color: darkMode ? 'var(--lighter-grey)' : 'black'\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default class Plot extends Component {\r\n    state = {\r\n        height: 290,\r\n        plotDetails: {\r\n            stats: 'cumulative',\r\n            fatalityLine: 'rate',\r\n            stream: 'silhouette',\r\n            diseaseComparison: 'show',\r\n            recoveryRate: 'show',\r\n            movingAverage: '1d',\r\n            shifted: '100'\r\n        },\r\n        plotSpecificType: 'total'\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateHight()\r\n        window.addEventListener('resize', this.updateHight)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateHight)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const { data, currentRegion } = this.props\r\n        const currentRegionIsGlobal = currentRegion.length === 1 && currentRegion[0] === str.GLOBAL_ZH\r\n        const hasSubregions = Object.keys(getDataFromRegion(data, currentRegion)).length > 4 || currentRegionIsGlobal\r\n\r\n        if (currentRegionIsGlobal && this.props.plotType === 'plot_one_vs_rest') {\r\n            this.props.handlePlotTypeChange('plot_basic')\r\n            this.setSpecificPlotType('plot_basic', this.state.plotDetails)\r\n        }\r\n\r\n        if (!hasSubregions && plotTypes[this.props.plotType].subregions) {\r\n            this.props.handlePlotTypeChange('plot_basic')\r\n            this.setSpecificPlotType('plot_basic', this.state.plotDetails)\r\n        }\r\n    }\r\n\r\n    updateHight = () => {\r\n        const vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)\r\n        const vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\n\r\n        this.setState({\r\n            height: vh < 850 && vw >= 992 ? 240 : 290\r\n        })\r\n    }\r\n\r\n    onSelect = (s, v) => {\r\n        let state = {}\r\n        state.plotDetails = this.state.plotDetails\r\n        state.plotDetails[s] = v\r\n\r\n        this.setState(state)\r\n        this.setSpecificPlotType(this.props.plotType, state.plotDetails)\r\n    }\r\n\r\n    setSpecificPlotType = (plotType, plotDetails) => {\r\n        const specificType = getSpecificPlotType(plotType, plotDetails)\r\n\r\n        this.setState({ plotSpecificType: specificType })\r\n    }\r\n\r\n    render() {\r\n        const { plotType, data, lang, darkMode, fullPlot, fullTree, fullPlotToggle, fullDimensions } = this.props\r\n\r\n        if (data == null || fullTree) return <div />\r\n\r\n        const plotParameters = plotSpecificTypes[this.state.plotSpecificType]\r\n        const plotDataAll = generatePlotData({\r\n            ...this.props,\r\n            plotSpecificType: this.state.plotSpecificType,\r\n            plotDetails: this.state.plotDetails\r\n        })\r\n        const plotData = plotDataAll.plotData\r\n\r\n        const isDataEmpty = ![ 'plot_subregion_active_stream', 'plot_subregion_stream' ].includes(plotType)\r\n            ? plotData.map((d) => d.data.length).reduce((s, x) => s + x, 0) === 0\r\n            : plotData.map((d) => Object.keys(d).length).reduce((s, x) => s + x, 0) === 0\r\n\r\n        const tickValues = isDataEmpty ? 0 : plotDataAll.tickValues != null ? plotDataAll.tickValues : 5\r\n\r\n        const FullScreenIcon = fullPlot ? AiOutlineFullscreenExit : AiOutlineFullscreen\r\n\r\n        const plotProps = {\r\n            ...this.props,\r\n            plotParameters,\r\n            plotDataAll,\r\n            tickValues,\r\n            plotTheme: plotTheme(darkMode, fullPlot)\r\n        }\r\n\r\n        return (\r\n            <div\r\n                className=\"plot-wrap\"\r\n                style={{\r\n                    height: !fullPlot ? 'auto' : fullDimensions.height - 100,\r\n                    width: !fullPlot ? '100%' : fullDimensions.width + 100\r\n                }}\r\n            >\r\n                <PlotSelector\r\n                    {...this.props}\r\n                    {...this.state}\r\n                    currentPlotType={plotType}\r\n                    onPlotTypeChange={(plotType) => {\r\n                        this.setSpecificPlotType(plotType, this.state.plotDetails)\r\n                        this.props.handlePlotTypeChange(plotType)\r\n                    }}\r\n                />\r\n                <div className=\"plot-with-nav-bar\">\r\n                    <PlotNavBar {...this.props} {...this.state} onSelect={this.onSelect} />\r\n                    <div\r\n                        style={{\r\n                            height: !fullPlot ? this.state.height : fullDimensions.height - 125,\r\n                            width: !fullPlot ? '100%' : fullDimensions.width - 70\r\n                        }}\r\n                    >\r\n                        {isDataEmpty ? (\r\n                            <div className=\"plot-no-data\">\r\n                                <span>{i18n.NO_DATA[lang]}</span>\r\n                            </div>\r\n                        ) : (\r\n                            <div />\r\n                        )}\r\n                        {!isDataEmpty && <LinePlot {...plotProps} />}\r\n                        {!isDataEmpty && <BumpPlot {...plotProps} />}\r\n                        {!isDataEmpty && <StreamPlot offsetType={this.state.plotDetails.stream} {...plotProps} />}\r\n                        <div\r\n                            className=\"plot-full-button\"\r\n                            data-tip={!fullPlot && !isMobile && !isIPad13 ? i18n.PLOT_SETTINGS[lang] : ''}\r\n                        >\r\n                            <FullScreenIcon size={fullPlot ? 30 : 20} onClick={fullPlotToggle} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { ResponsiveBubble } from '@nivo/circle-packing'\r\nimport { interpolateMagma } from 'd3-scale-chromatic'\r\nimport { getDataFromRegion, generateTreeData } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\n\r\nexport default class BubblePlot extends Component {\r\n    state = {\r\n        plotData: null,\r\n        currentNodePath: null\r\n    }\r\n\r\n    // hack so that bubble plot can interact with other plots\r\n    handleNodeClick = (node) => {\r\n        const region = node.path === str.GLOBAL_ZH ? [ node.path ] : node.path.split('.').reverse().slice(1)\r\n        this.props.regionToggle(region)\r\n    }\r\n\r\n    bringTextsToTop = () => {\r\n        setTimeout(() => {\r\n            document.querySelectorAll('.bubble-plot-wrap text').forEach((elem) => {\r\n                let parentElem = elem.parentNode\r\n                // bring texts to top\r\n                elem.parentNode.parentNode.appendChild(parentElem)\r\n            })\r\n        }, 100)\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.bringTextsToTop()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.bringTextsToTop()\r\n    }\r\n\r\n    render() {\r\n        const { data, metric, currentRegion, date, playing, lang, darkMode, fullTree } = this.props\r\n        if (data == null) return <div />\r\n        let plotData = {\r\n            name: str.GLOBAL_ZH,\r\n            displayName: lang === 'en' ? str.GLOBAL_EN : str.GLOBAL_ZH,\r\n            confirmedCount: data[str.GLOBAL_ZH].confirmedCount[date],\r\n            deadCount: data[str.GLOBAL_ZH].deadCount[date],\r\n            curedCount: data[str.GLOBAL_ZH].curedCount[date],\r\n            children: generateTreeData(data, date, lang)\r\n        }\r\n\r\n        let currentNodePath =\r\n            currentRegion[0] === str.GLOBAL_ZH ? str.GLOBAL_ZH : [ str.GLOBAL_ZH, ...currentRegion ].reverse().join('.')\r\n\r\n        // TODO: Node does not exist when count is 0. Need to find the parent node that has non-zero count.\r\n        const currentData = getDataFromRegion(data, currentRegion)\r\n        const count = currentData[metric][date]\r\n        if (\r\n            count == null ||\r\n            count === 0 ||\r\n            (currentRegion[0] === str.CHINA_ZH && currentRegion.length > 3) ||\r\n            (currentRegion[0] === str.US_ZH && currentRegion.length === 3) ||\r\n            (currentRegion[0] === str.UK_ZH && currentRegion.length > 3) ||\r\n            (currentRegion[0] === str.ITALY_ZH && currentRegion.length > 2) ||\r\n            (currentRegion[0] === str.PHILIPPINES_ZH && currentRegion.length > 2)\r\n        )\r\n            currentNodePath = [ str.GLOBAL_ZH, ...currentRegion.slice(0, currentRegion.length - 1) ].reverse().join('.')\r\n\r\n        let displayNodePath =\r\n            Object.keys(currentData).length > 4\r\n                ? currentNodePath\r\n                : currentRegion[0] === str.GLOBAL_ZH\r\n                  ? str.GLOBAL_ZH\r\n                  : [ str.GLOBAL_ZH, ...currentRegion.slice(0, currentRegion.length - 1) ].reverse().join('.')\r\n\r\n        if (currentRegion[0] === str.US_ZH && currentRegion.length > 1)\r\n            displayNodePath = [ str.GLOBAL_ZH, str.US_ZH ].reverse().join('.')\r\n\r\n        if (currentRegion[0] === str.UK_ZH && currentRegion.length > 2)\r\n            displayNodePath = [ str.GLOBAL_ZH, ...currentRegion.slice(0, 2) ].reverse().join('.')\r\n\r\n        if (currentRegion[0] === str.CHINA_ZH && currentRegion.length > 2)\r\n            displayNodePath = [ str.GLOBAL_ZH, ...currentRegion.slice(0, 2) ].reverse().join('.')\r\n\r\n        if (currentRegion[0] === str.ITALY_ZH && currentRegion.length > 1)\r\n            displayNodePath = [ str.GLOBAL_ZH, str.ITALY_ZH ].reverse().join('.')\r\n\r\n        if (currentRegion[0] === str.PHILIPPINES_ZH && currentRegion.length > 1)\r\n            displayNodePath = [ str.GLOBAL_ZH, str.PHILIPPINES_ZH ].reverse().join('.')\r\n\r\n        return (\r\n            <div className=\"bubble-plot-wrap\">\r\n                <ResponsiveBubble\r\n                    ref={this.bubble}\r\n                    root={plotData}\r\n                    theme={{\r\n                        fontFamily: 'Saira, sans-serif',\r\n                        fontSize: !fullTree ? 11 : 14,\r\n                        tooltip: {\r\n                            container: {\r\n                                background: darkMode ? 'var(--darkest-grey)' : 'white'\r\n                            }\r\n                        }\r\n                    }}\r\n                    margin={{ top: 20, right: 20, bottom: 20, left: 20 }}\r\n                    tooltip={({ color, value, data }) => (\r\n                        <span\r\n                            className=\"plot-tooltip\"\r\n                            style={{ color: color === '#fff' && !darkMode ? '#222' : color }}\r\n                        >\r\n                            {data.displayName}\r\n                            <span className=\"plot-tooltip-bold\">{` ${data[metric]}`}</span>\r\n                        </span>\r\n                    )}\r\n                    identity=\"name\"\r\n                    value={metric}\r\n                    colors={[ ...[ 0.3, 0.4, 0.15 ].map((x) => interpolateMagma(1 - x)), '#fff' ]}\r\n                    padding={3}\r\n                    enableLabel={true}\r\n                    label={({ data }) => data.displayName}\r\n                    labelTextColor={'#222'}\r\n                    labelSkipRadius={!fullTree ? 6 : 10}\r\n                    animate={!playing}\r\n                    motionStiffness={50}\r\n                    motionDamping={12}\r\n                    onClick={this.handleNodeClick}\r\n                    defs={[\r\n                        {\r\n                            id: 'bubbleLines',\r\n                            type: 'patternLines',\r\n                            background: 'none',\r\n                            color: 'inherit',\r\n                            rotation: -45,\r\n                            lineWidth: 4,\r\n                            spacing: 5\r\n                        }\r\n                    ]}\r\n                    fill={[\r\n                        {\r\n                            match: (d) => d.path === currentNodePath,\r\n                            id: 'bubbleLines'\r\n                        }\r\n                    ]}\r\n                    currentNodePath={displayNodePath}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { useTable, useExpanded, useSortBy, useFilters } from 'react-table'\r\n\r\nfunction textFilter(rows, ids, filterValue) {\r\n    return rows.filter((r) =>\r\n        ids.some((id) => {\r\n            const value = r.values[id]\r\n            return String(value).toLowerCase().includes(String(filterValue).toLowerCase())\r\n        })\r\n    )\r\n}\r\n\r\n// flatten filter so that the filter can match subrows\r\n// reference: https://github.com/uqix/reactkit-table/blob/master/src/filter/flatten.js\r\nfunction flatten(filter) {\r\n    return function(rows, ids, filterValue) {\r\n        const flatRows = treeToFlat(rows).map((r) => ({\r\n            ...r,\r\n            // or useFilters would recursively filter subRows\r\n            subRows: [],\r\n            depth: 0,\r\n            xFlat: true\r\n        }))\r\n        return filter(flatRows, ids, filterValue)\r\n    }\r\n}\r\n\r\nfunction treeToFlat(rows) {\r\n    return [ ...rows, ...rows.map((r) => treeToFlat(r.subRows || [])).reduce((pre, cur) => [ ...pre, ...cur ], []) ]\r\n}\r\n\r\nconst RegionFilter = (placeholderText) => ({ column: { filterValue, preFilteredRows, setFilter } }) => {\r\n    return (\r\n        <input\r\n            className=\"data-table-input\"\r\n            value={filterValue || ''}\r\n            onChange={(e) => {\r\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n            }}\r\n            placeholder={placeholderText}\r\n        />\r\n    )\r\n}\r\n\r\nexport default function RawTable(props) {\r\n    const { columns, data, initialState, onRowClick, filterPlaceholder } = props\r\n\r\n    const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn: { Filter: RegionFilter(filterPlaceholder), filter: flatten(textFilter) },\r\n            initialState,\r\n            getResetExpandedDeps: false\r\n        },\r\n        useFilters,\r\n        useSortBy,\r\n        useExpanded\r\n    )\r\n\r\n    return (\r\n        <div className=\"data-table-wrap\">\r\n            {headerGroups[0].headers[1].render('Filter')}\r\n            <table className=\"data-table\" {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map((headerGroup, i) => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map((column, j) => (\r\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                                    {column.render('Header')}\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {rows.map((row, i) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr id={`table-${row.original.region}`} {...row.getRowProps()}>\r\n                                {row.cells.map((cell, cellIdx) => {\r\n                                    return (\r\n                                        <td\r\n                                            {...cell.getCellProps()}\r\n                                            onClick={cellIdx > 0 ? () => onRowClick(row) : null}\r\n                                        >\r\n                                            {cell.render('Cell')}\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <div style={{ display: 'none' }}>{rows.length} regions</div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport { AiFillCaretRight, AiFillCaretDown } from 'react-icons/ai'\r\nimport RawTable from './RawTable'\r\nimport { generateTreeData } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nexport default class Table extends Component {\r\n    onRowClick = (row) => {\r\n        this.props.regionToggle(row.original.region.split('.'))\r\n    }\r\n\r\n    highlightCurrentRegion = () => {\r\n        document.querySelectorAll('.data-table tr').forEach((x) => x.classList.remove('current'))\r\n        // hack\r\n        setTimeout(() => {\r\n            const elem = document.getElementById(`table-${this.props.currentRegion.join('.')}`)\r\n            const tbodyElem = document.querySelector('.data-table tbody')\r\n\r\n            // scroll into view if the row is not visible\r\n            if (elem != null && tbodyElem != null) {\r\n                elem.classList.add('current')\r\n                const bounding = elem.getBoundingClientRect()\r\n                const tableBounding = tbodyElem.getBoundingClientRect()\r\n                const isInViewPort = bounding.top >= tableBounding.top && bounding.bottom <= tableBounding.bottom\r\n\r\n                if (!isInViewPort) tbodyElem.scrollTop = elem.offsetTop - tbodyElem.offsetTop\r\n            }\r\n        }, 200)\r\n    }\r\n\r\n    getInitialSate = (tableData) => {\r\n        const { currentRegion, playing } = this.props\r\n        if (currentRegion[0] === str.GLOBAL_ZH && playing) return {}\r\n\r\n        let indices = []\r\n        currentRegion.slice(0, currentRegion.length - 1).forEach((r) => {\r\n            const regionData = indices.reduce((s, x) => (Array.isArray(s) ? s[x] : s.subRows[x]), tableData)\r\n            const subregions = Array.isArray(regionData) ? regionData : regionData.subRows\r\n            const newIdx = subregions.findIndex((x) => x.name === r)\r\n            indices.push(newIdx)\r\n        })\r\n        const expanded = indices.map((x, i) => indices.slice(0, i + 1).join('.')).reduce((s, x) => {\r\n            s[x] = true\r\n            return s\r\n        }, {})\r\n\r\n        return {\r\n            expanded\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.currentRegion.join('.') !== this.props.currentRegion.join('.')) this.highlightCurrentRegion()\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.highlightCurrentRegion()\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps) {\r\n        return (\r\n            nextProps.lang !== this.props.lang ||\r\n            nextProps.date !== this.props.date ||\r\n            nextProps.currentRegion !== this.props.currentRegion ||\r\n            nextProps.fullTree !== this.props.fullTree\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const { data, lang, date, fullTree } = this.props\r\n        if (data == null) return <div />\r\n        const tableData = generateTreeData(\r\n            data,\r\n            date,\r\n            lang,\r\n            false,\r\n            'subRows',\r\n            'confirmedCount',\r\n            str.GLOBAL_ZH,\r\n            fullTree\r\n        )\r\n\r\n        let columns = [\r\n            {\r\n                // Build our expander column\r\n                id: 'expander', // Make sure it has an ID\r\n                Header: ({ getToggleAllRowsExpandedProps, isAllRowsExpanded }) => (\r\n                    <span {...getToggleAllRowsExpandedProps()}>\r\n                        {isAllRowsExpanded ? <AiFillCaretDown size={14} /> : <AiFillCaretRight size={14} />}\r\n                    </span>\r\n                ),\r\n                Cell: ({ row }) =>\r\n                    // Use the row.canExpand and row.getToggleRowExpandedProps prop getter\r\n                    // to build the toggle for expanding a row\r\n                    row.canExpand ? (\r\n                        <span\r\n                            {...row.getToggleRowExpandedProps({\r\n                                style: {\r\n                                    // We can even use the row.depth property\r\n                                    // and paddingLeft to indicate the depth\r\n                                    // of the row\r\n                                    paddingLeft: 0\r\n                                }\r\n                            })}\r\n                        >\r\n                            {row.isExpanded ? <AiFillCaretDown size={14} /> : <AiFillCaretRight size={14} />}\r\n                        </span>\r\n                    ) : null\r\n            },\r\n            {\r\n                id: 'table-region',\r\n                Header: i18n.REGION[lang],\r\n                Cell: ({ row }) => {\r\n                    return (\r\n                        <span>{`${[ ...Array(row.depth + 1).keys() ].map((x) => '　').join('')}${row.original\r\n                            .displayName}\\u00a0\\u00a0`}</span>\r\n                    )\r\n                },\r\n                accessor: 'displayName'\r\n            },\r\n            {\r\n                id: 'table-confirmed',\r\n                Header: i18n.CONFIRMED[lang],\r\n                Cell: ({ row }) => (!isNaN(row.original.confirmedCount) ? row.original.confirmedCount : str.EMPTY),\r\n                accessor: 'confirmedCount'\r\n            },\r\n            {\r\n                id: 'table-deaths',\r\n                Header: i18n.DEATHS[lang],\r\n                Cell: ({ row }) => (!isNaN(row.original.deadCount) ? row.original.deadCount : str.EMPTY),\r\n                accessor: 'deadCount'\r\n            },\r\n            {\r\n                id: 'table-recovery',\r\n                Header: i18n.RECOVERED[lang],\r\n                Cell: ({ row }) => (!isNaN(row.original.curedCount) ? row.original.curedCount : str.EMPTY),\r\n                accessor: 'curedCount'\r\n            }\r\n        ]\r\n\r\n        if (fullTree)\r\n            columns = [\r\n                ...columns,\r\n                ...[\r\n                    {\r\n                        id: 'table-active',\r\n                        Header: i18n.ACTIVE[lang],\r\n                        Cell: ({ row }) => (!isNaN(row.original.active) ? row.original.active : str.EMPTY),\r\n                        accessor: 'active'\r\n                    },\r\n                    {\r\n                        id: 'table-newConfirmed',\r\n                        Header: i18n.NEW_CONFIRMED[lang],\r\n                        Cell: ({ row }) => (!isNaN(row.original.newConfirmed) ? row.original.newConfirmed : str.EMPTY),\r\n                        accessor: 'newConfirmed'\r\n                    },\r\n                    {\r\n                        id: 'table-newDead',\r\n                        Header: i18n.NEW_DEATHS[lang],\r\n                        Cell: ({ row }) => (!isNaN(row.original.newDead) ? row.original.newDead : str.EMPTY),\r\n                        accessor: 'newDead'\r\n                    },\r\n                    {\r\n                        id: 'table-fatalityRate',\r\n                        Header: i18n.FATALITY_RATE[lang],\r\n                        Cell: ({ row }) =>\r\n                            !isNaN(row.original.fatalityRate)\r\n                                ? (row.original.fatalityRate * 100).toFixed(2) + '%'\r\n                                : str.EMPTY,\r\n                        accessor: 'fatalityRate',\r\n                        sortType: 'basic'\r\n                    },\r\n                    {\r\n                        id: 'table-recoveryRate',\r\n                        Header: i18n.RECOVERY_RATE[lang],\r\n                        Cell: ({ row }) =>\r\n                            !isNaN(row.original.recoveryRate)\r\n                                ? (row.original.recoveryRate * 100).toFixed(2) + '%'\r\n                                : str.EMPTY,\r\n                        accessor: 'recoveryRate',\r\n                        sortType: 'basic'\r\n                    }\r\n                ]\r\n            ]\r\n\r\n        const initialState = this.getInitialSate(tableData)\r\n\r\n        return (\r\n            <div style={{ height: '100%' }}>\r\n                <RawTable\r\n                    columns={columns}\r\n                    data={tableData}\r\n                    initialState={initialState}\r\n                    onRowClick={this.onRowClick}\r\n                    filterPlaceholder={`${i18n.SEARCH[lang]} ...`}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { AiOutlineFullscreen, AiOutlineFullscreenExit } from 'react-icons/ai'\r\nimport BubblePlot from './BubblePlot'\r\nimport Table from './Table'\r\nimport RadioButton from './RadioButton'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nexport default class Tree extends Component {\r\n    state = {\r\n        height: 280,\r\n        type: 'bubble'\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateHight()\r\n        window.addEventListener('resize', this.updateHight)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateHight)\r\n    }\r\n\r\n    updateHight = () => {\r\n        const vh = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)\r\n        const vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0)\r\n\r\n        this.setState({\r\n            height: vh < 850 && vw >= 992 ? 240 : 280\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { fullPlot, fullTree, fullTreeToggle, fullDimensions, lang } = this.props\r\n        if (fullPlot) return <div />\r\n\r\n        const FullScreenIcon = fullTree ? AiOutlineFullscreenExit : AiOutlineFullscreen\r\n        return (\r\n            <div\r\n                className=\"tree-wrap\"\r\n                style={{\r\n                    height: !fullTree ? this.state.height : fullDimensions.height - 100,\r\n                    width: !fullTree ? '100%' : fullDimensions.width + 100\r\n                }}\r\n            >\r\n                <div className=\"tree-full-button\">\r\n                    <FullScreenIcon size={fullTree ? 30 : 20} onClick={fullTreeToggle} />\r\n                </div>\r\n                <div className=\"bubble-table-toggle-btn\">\r\n                    <RadioButton\r\n                        texts={{ bubble: i18n.BUBBLES[lang], table: i18n.TABLE[lang] }}\r\n                        selected={this.state.type}\r\n                        onSelect={(s) => this.setState({ type: s })}\r\n                        alwaysShow={true}\r\n                    />\r\n                </div>\r\n                {this.state.type === 'bubble' && <BubblePlot {...this.props} />}\r\n                {this.state.type === 'table' && <Table {...this.props} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\r\nimport { isMobile, isIPad13 } from 'react-device-detect'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nexport default class NavBar extends Component {\r\n    state = {\r\n        langText: 'English',\r\n        scaleText: i18n.LINEAR_SCALE.en,\r\n        darkModeText: i18n.DARK.en\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n            prevProps.scale !== this.props.scale ||\r\n            prevProps.lang !== this.props.lang ||\r\n            prevProps.darkMode !== this.props.darkMode\r\n        )\r\n            this.setTexts()\r\n    }\r\n\r\n    setTexts = () => {\r\n        const { scale, lang, darkMode } = this.props\r\n        this.setState({\r\n            langText: i18n.LANGUAGE[lang],\r\n            scaleText: scale === 'linear' ? i18n.LINEAR_SCALE[lang] : i18n.LOG_SCALE[lang],\r\n            darkModeText: darkMode ? i18n.DARK[lang] : i18n.LIGHT[lang]\r\n        })\r\n    }\r\n\r\n    onScaleChange = () => {\r\n        const newScale = this.props.scale === 'linear' ? 'log' : 'linear'\r\n        this.props.scaleToggle(newScale)\r\n    }\r\n\r\n    render() {\r\n        const { scale, lang, darkMode, languageToggle } = this.props\r\n        return (\r\n            <div className=\"nav-bar\">\r\n                <UncontrolledDropdown>\r\n                    <DropdownToggle\r\n                        tag=\"div\"\r\n                        className=\"nav-bar-icon\"\r\n                        data-toggle=\"dropdown\"\r\n                        data-tip={i18n.LANGUAGE_HELP_TEXT[lang]}\r\n                    >\r\n                        {i18n.LANGUAGE[lang]}\r\n                    </DropdownToggle>\r\n                    <DropdownMenu>\r\n                        {Object.keys(i18n.LANGUAGE).map((x) => (\r\n                            <DropdownItem\r\n                                key={x}\r\n                                className={x === lang ? 'current' : ''}\r\n                                onClick={() => languageToggle(x)}\r\n                            >\r\n                                {i18n.LANGUAGE[x]}\r\n                            </DropdownItem>\r\n                        ))}\r\n                    </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n                {isMobile || isIPad13 ? (\r\n                    <div className=\"nav-bar-icon\" onTouchStart={this.props.darkModeToggle}>\r\n                        {darkMode ? i18n.DARK[lang] : i18n.LIGHT[lang]}\r\n                    </div>\r\n                ) : (\r\n                    <div\r\n                        className=\"nav-bar-icon\"\r\n                        data-tip={darkMode ? i18n.LIGHT_MODE_HELP_TEXT[lang] : i18n.DARK_MODE_HELP_TEXT[lang]}\r\n                        onClick={this.props.darkModeToggle}\r\n                        onMouseEnter={() =>\r\n                            this.setState({\r\n                                darkModeText: darkMode ? i18n.LIGHT[lang] : i18n.DARK[lang]\r\n                            })}\r\n                        onMouseLeave={this.setTexts}\r\n                    >\r\n                        {this.state.darkModeText}\r\n                    </div>\r\n                )}\r\n                {isMobile || isIPad13 ? (\r\n                    <div className=\"nav-bar-icon\" onTouchStart={this.onScaleChange}>\r\n                        {scale === 'linear' ? i18n.LINEAR_SCALE[lang] : i18n.LOG_SCALE[lang]}\r\n                    </div>\r\n                ) : (\r\n                    <div\r\n                        className=\"nav-bar-icon\"\r\n                        data-tip={\r\n                            scale === 'linear' ? i18n.LOG_SCALE_HELP_TEXT[lang] : i18n.LINEAR_SCALE_HELP_TEXT[lang]\r\n                        }\r\n                        onClick={this.onScaleChange}\r\n                        onMouseEnter={() =>\r\n                            this.setState({\r\n                                scaleText: scale === 'linear' ? i18n.LOG_SCALE[lang] : i18n.LINEAR_SCALE[lang]\r\n                            })}\r\n                        onMouseLeave={this.setTexts}\r\n                    >\r\n                        {this.state.scaleText}\r\n                    </div>\r\n                )}\r\n                <div className=\"nav-bar-icon\" data-tip={i18n.RESET_HELP_TEXT[lang]} onClick={this.props.reset}>\r\n                    {i18n.RESET[lang]}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"path\", {\n  d: \"M21.749,14.235c0.187-0.811,0.271-1.644,0.25-2.475c-0.016-0.658-0.1-1.322-0.251-1.985l-1.947,0.454 c0.058,0.256,0.103,0.514,0.136,0.772H18.92c-0.17-1.185-0.634-2.271-1.32-3.187l0.716-0.716c0.158,0.203,0.312,0.411,0.449,0.628 l1.691-1.068c-0.795-1.259-1.886-2.343-3.155-3.136l-1.059,1.696c0.228,0.143,0.447,0.301,0.66,0.467l-0.715,0.715 C15.271,5.714,14.185,5.249,13,5.08V4.067c0.256,0.032,0.512,0.071,0.764,0.128l0.444-1.95c-1.445-0.328-3.054-0.31-4.349-0.01 L9.741,2.259l0.487,1.94c0.255-0.058,0.513-0.098,0.772-0.13V5.08c-1.185,0.17-2.271,0.634-3.187,1.32L7.097,5.683 c0.205-0.16,0.415-0.314,0.634-0.453L6.665,3.539c-1.259,0.793-2.344,1.883-3.139,3.15l1.695,1.062 c0.142-0.226,0.299-0.443,0.463-0.654l0.715,0.715C5.714,8.729,5.249,9.815,5.08,11H4.07c0.032-0.259,0.068-0.518,0.126-0.773 L2.246,9.784c-0.184,0.804-0.266,1.631-0.245,2.457c0.016,0.657,0.1,1.322,0.244,1.956l0.003,0.016l1.951-0.441 C4.141,13.516,4.096,13.258,4.063,13H5.08c0.17,1.185,0.634,2.271,1.32,3.187l-0.716,0.716c-0.162-0.207-0.317-0.42-0.457-0.642 l-1.693,1.065c0.793,1.26,1.881,2.347,3.148,3.142l1.063-1.694c-0.224-0.141-0.438-0.297-0.647-0.459l0.715-0.715 c0.915,0.685,2.002,1.15,3.187,1.32v1.014c-0.261-0.033-0.522-0.074-0.779-0.132l-0.445,1.949c0.807,0.185,1.636,0.268,2.465,0.247 c0.661-0.017,1.324-0.1,1.941-0.24l0.009-0.002l-0.418-1.956c-0.255,0.058-0.513,0.098-0.772,0.131V18.92 c1.185-0.17,2.271-0.634,3.187-1.32l0.716,0.716c-0.209,0.163-0.423,0.319-0.647,0.46l1.064,1.694 c1.26-0.792,2.347-1.879,3.144-3.145l-1.693-1.065c-0.14,0.222-0.295,0.434-0.456,0.641l-0.715-0.715 c0.685-0.915,1.15-2.002,1.32-3.187h1.009c-0.033,0.264-0.07,0.527-0.13,0.786L21.749,14.235z M7,12c0-0.552,0.448-1,1-1 s1,0.448,1,1c0,0.552-0.448,1-1,1S7,12.552,7,12z M9,16c-0.552,0-1-0.448-1-1c0-0.552,0.448-1,1-1s1,0.448,1,1 C10,15.552,9.552,16,9,16z M9,10c-0.552,0-1-0.448-1-1c0-0.552,0.448-1,1-1s1,0.448,1,1C10,9.552,9.552,10,9,10z M12,17 c-0.552,0-1-0.448-1-1c0-0.552,0.448-1,1-1s1,0.448,1,1C13,16.552,12.552,17,12,17z M12,13c-0.552,0-1-0.448-1-1 c0-0.552,0.448-1,1-1s1,0.448,1,1C13,12.552,12.552,13,12,13z M12,9c-0.552,0-1-0.448-1-1c0-0.552,0.448-1,1-1s1,0.448,1,1 C13,8.552,12.552,9,12,9z M15,8c0.552,0,1,0.448,1,1c0,0.552-0.448,1-1,1s-1-0.448-1-1C14,8.448,14.448,8,15,8z M15,16 c-0.552,0-1-0.448-1-1c0-0.552,0.448-1,1-1s1,0.448,1,1C16,15.552,15.552,16,15,16z M16,13c-0.552,0-1-0.448-1-1 c0-0.552,0.448-1,1-1s1,0.448,1,1C17,12.552,16.552,13,16,13z\"\n});\n\nvar SvgCovid19 = function SvgCovid19(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 24 24\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgCovid19, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/covid19.865ca908.svg\";\nexport { ForwardRef as ReactComponent };","import React, { Component } from 'react'\r\nimport { ReactComponent as Icon } from '../covid19.svg'\r\n\r\nexport default class Loading extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"loading-icon\">\r\n                <Icon />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { FaInfoCircle, FaGithub } from 'react-icons/fa'\r\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap'\r\nimport { isMobile, isIPad13 } from 'react-device-detect'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nexport default class Footer extends Component {\r\n    state = {\r\n        modal: false\r\n    }\r\n\r\n    toggle = () => this.setState({ modal: !this.state.modal })\r\n\r\n    render() {\r\n        const { lang, fullMap, fullPlot, fullTree } = this.props\r\n        if (fullMap || fullPlot || fullTree) return <div />\r\n\r\n        return (\r\n            <Fragment>\r\n                <div className=\"footer\">\r\n                    <span>\r\n                        <a href=\"https://yliu.io\">Steven Liu</a> 2020\r\n                    </span>\r\n                    <FaInfoCircle\r\n                        data-tip={!(isMobile || isIPad13) ? i18n.ABOUT[lang] : null}\r\n                        size={18}\r\n                        onClick={() => this.setState({ modal: true })}\r\n                    />\r\n                    <FaGithub\r\n                        data-tip={!(isMobile || isIPad13) ? i18n.SOURCE_CODE[lang] : null}\r\n                        size={18}\r\n                        onClick={() => window.open('https://github.com/stevenliuyi/covid19')}\r\n                    />\r\n                </div>\r\n                <Modal isOpen={this.state.modal} centered={true} toggle={this.toggle}>\r\n                    <ModalHeader toggle={this.toggle}>{i18n.ABOUT[lang]}</ModalHeader>\r\n                    <ModalBody className=\"footer-about\">\r\n                        <div dangerouslySetInnerHTML={{ __html: i18n.ABOUT_TEXT[lang] }} />\r\n                        <a\r\n                            className=\"bmc-button\"\r\n                            target=\"_blank\"\r\n                            href=\"https://www.buymeacoffee.com/stevenliuyi\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >\r\n                            <img\r\n                                src=\"https://cdn.buymeacoffee.com/buttons/bmc-new-btn-logo.svg\"\r\n                                alt=\"Buy me a coffee\"\r\n                            />\r\n                            <span style={{ marginLeft: 15, fontSize: 19 }}>Buy me a coffee</span>\r\n                        </a>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nconst RegionDropdown = ({ children, isOpen, target, onClose }) => (\r\n    <div style={{ position: 'relative' }}>\r\n        {target}\r\n        {isOpen ? <div className=\"region-menu\">{children}</div> : null}\r\n        {isOpen ? <div className=\"region-blanket\" onClick={onClose} /> : null}\r\n    </div>\r\n)\r\n\r\nexport default RegionDropdown\r\n","import React, { Component, Fragment } from 'react'\r\nimport { MdKeyboardArrowRight } from 'react-icons/md'\r\n\r\nexport default class RegionSelectOption extends Component {\r\n    render() {\r\n        const { region, data, date, metric, darkMode } = this.props\r\n        return (\r\n            <div className=\"region-option\">\r\n                <div>\r\n                    {region.map(\r\n                        (x, i) =>\r\n                            i === region.length - 1 ? (\r\n                                <span key={`region-${region[region.length - 1]}-${i}`}>{x}</span>\r\n                            ) : (\r\n                                <Fragment key={`region-${region[region.length - 1]}-${i}`}>\r\n                                    <span>{x}</span>\r\n                                    <MdKeyboardArrowRight\r\n                                        size={14}\r\n                                        color={darkMode ? 'var(--light-grey)' : 'var(--dark-grey)'}\r\n                                    />\r\n                                </Fragment>\r\n                            )\r\n                    )}\r\n                </div>\r\n                <div className=\"region-option-count\">{data[metric] && data[metric][date] ? data[metric][date] : 0}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Select from 'react-select'\r\nimport { GoFold, GoUnfold, GoSearch } from 'react-icons/go'\r\nimport RegionDropdown from './RegionDropdown'\r\nimport RegionSelectOption from './RegionSelectOption'\r\nimport { formatDate, getDataFromRegion } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\nimport i18n from '../data/i18n.yml'\r\n\r\nconst selectStyles = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        minWidth: 240,\r\n        marginBottom: 8,\r\n        borderRadius: 30\r\n    }),\r\n    menu: () => ({\r\n        backgroundColor: 'white',\r\n        boxShadow: '0 0 0 1px hsla(218, 50%, 10%, 0.1), 0 4px 11px hsla(218, 50%, 10%, 0.1)',\r\n        cursor: 'pointer'\r\n    }),\r\n    option: (provided, state) => ({\r\n        ...provided,\r\n        textAlign: 'left',\r\n        fontSize: 12,\r\n        backgroundColor: state.isFocused ? 'var(--primary-color-5)' : state.isSelected ? '#eee' : null,\r\n        color: state.isFocused ? '#fff' : '#000',\r\n        cursor: 'pointer'\r\n    })\r\n}\r\n\r\nconst selectStylesDark = {\r\n    control: (provided, state) => ({\r\n        ...provided,\r\n        minWidth: 240,\r\n        marginBottom: 8,\r\n        borderRadius: 30\r\n    }),\r\n    menu: () => ({\r\n        backgroundColor: 'var(--dark-grey)',\r\n        boxShadow: '0 0 0 1px hsla(218, 50%, 10%, 0.1), 0 4px 11px hsla(218, 50%, 10%, 0.1)',\r\n        cursor: 'pointer'\r\n    }),\r\n    option: (provided, state) => ({\r\n        ...provided,\r\n        textAlign: 'left',\r\n        fontSize: 12,\r\n        backgroundColor: state.isFocused ? 'var(--primary-color-4)' : state.isSelected ? '#777' : null,\r\n        color: 'var(--lighter-grey)',\r\n        cursor: 'pointer'\r\n    })\r\n}\r\n\r\nexport default class Region extends Component {\r\n    state = {\r\n        isOpen: false,\r\n        //value: undefined,\r\n        value: 'en',\r\n        options: [],\r\n        countryOnly: true\r\n    }\r\n\r\n    componentDidMount() {\r\n        const options = this.generateOptions([])\r\n        this.setState({ options, value: { value: this.props.lang === 'zh' ? str.GLOBAL_ZH : str.GLOBAL_EN } })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (\r\n            prevProps.lang !== this.props.lang ||\r\n            prevProps.metric !== this.props.metric ||\r\n            prevProps.date !== this.props.date ||\r\n            prevState.countryOnly !== this.state.countryOnly\r\n        ) {\r\n            const options = this.generateOptions([])\r\n            this.setState({ options })\r\n        }\r\n\r\n        if (prevState.isOpen !== this.state.isOpen || prevState.countryOnly !== this.state.countryOnly) {\r\n            this.props.ReactTooltip.rebuild()\r\n        }\r\n\r\n        if (prevProps.currentRegion !== this.props.currentRegion) {\r\n            const { data, currentRegion, lang } = this.props\r\n            const englishRegion = [ ...Array(currentRegion.length).keys() ]\r\n                .map((i) => currentRegion.slice(0, i + 1))\r\n                .map((regionList) => getDataFromRegion(data, regionList).ENGLISH)\r\n            this.setState({ value: { value: lang === 'zh' ? currentRegion.join('') : englishRegion.join('') } })\r\n        }\r\n    }\r\n\r\n    toggleOpen = () => {\r\n        this.setState((state) => ({ isOpen: !state.isOpen }))\r\n    }\r\n\r\n    toggleCountryOnly = () => {\r\n        this.props.ReactTooltip.hide(this.regionSelectMore)\r\n        this.setState({\r\n            countryOnly: !this.state.countryOnly\r\n        })\r\n    }\r\n\r\n    onSelectChange = (selected) => {\r\n        this.toggleOpen()\r\n        this.setState({ value: selected })\r\n        this.props.regionToggle(selected.region)\r\n    }\r\n\r\n    generateOptions = (root) => {\r\n        const { data, lang, date, metric } = this.props\r\n        const englishRoot = [ ...Array(root.length).keys() ]\r\n            .map((i) => root.slice(0, i + 1))\r\n            .map((regionList) => getDataFromRegion(data, regionList).ENGLISH)\r\n\r\n        let options = []\r\n        const regionData = getDataFromRegion(data, root)\r\n        Object.keys(regionData)\r\n            .filter((d) => ![ 'confirmedCount', 'deadCount', 'curedCount', 'ENGLISH' ].includes(d))\r\n            .sort((a, b) => {\r\n                const aCount = regionData[a][metric][date] ? regionData[a][metric][date] : 0\r\n                const bCount = regionData[b][metric][date] ? regionData[b][metric][date] : 0\r\n                return aCount > bCount ? -1 : 1\r\n            })\r\n            .forEach((d) => {\r\n                options.push({\r\n                    value: lang === 'zh' ? [ ...root, d ].join('') : [ ...englishRoot, regionData[d].ENGLISH ].join(''),\r\n                    region: [ ...root, d ],\r\n                    label: (\r\n                        <RegionSelectOption\r\n                            region={lang === 'zh' ? [ ...root, d ] : [ ...englishRoot, regionData[d].ENGLISH ]}\r\n                            data={regionData[d]}\r\n                            date={date}\r\n                            metric={metric}\r\n                        />\r\n                    )\r\n                })\r\n                const childData = getDataFromRegion(data, [ ...root, d ])\r\n                const showSubRegions = [ str.CHINA_ZH, str.FRANCE_ZH, str.UK_ZH, str.NETHERLANDS_ZH, str.DENMARK_ZH ]\r\n                if (\r\n                    Object.keys(childData).length > 4 &&\r\n                    (!this.state.countryOnly || (root.length === 0 && showSubRegions.includes(d)))\r\n                )\r\n                    options = [ ...options, ...this.generateOptions([ ...root, d ]) ]\r\n            })\r\n\r\n        return options\r\n    }\r\n\r\n    displayRegionName = () => {\r\n        const { currentRegion, data, lang } = this.props\r\n\r\n        // remove duplicates in case same region occurs at different level (e.g. Japan)\r\n        let region = [ ...new Set(currentRegion) ]\r\n\r\n        if (lang === 'zh') {\r\n            region = region.join('')\r\n            // China\r\n            region = region !== str.CHINA_ZH ? region.replace(str.CHINA_ZH, '') : str.CHINA_ZH\r\n            region =\r\n                region !== str.INTL_CONVEYANCE_ZH ? region.replace(str.INTL_CONVEYANCE_ZH, '') : str.INTL_CONVEYANCE_ZH\r\n            region =\r\n                region !== str.MAINLAND_CHINA_ZH ? region.replace(str.MAINLAND_CHINA_ZH, '') : str.MAINLAND_CHINA_ZH\r\n\r\n            // France\r\n            region =\r\n                region !== `${str.FRANCE_ZH}${str.METRO_FRANCE_ZH}`\r\n                    ? region.replace(str.METRO_FRANCE_ZH, '')\r\n                    : str.METRO_FRANCE_ZH\r\n            region =\r\n                region !== `${str.FRANCE_ZH}${str.OVERSEAS_FRANCE_ZH}`\r\n                    ? region.replace(`${str.FRANCE_ZH}${str.OVERSEAS_FRANCE_ZH}`, '')\r\n                    : `${str.FRANCE_ZH}${str.OVERSEAS_FRANCE_ZH}`\r\n\r\n            // UK\r\n            region =\r\n                region !== `${str.UK_ZH}${str.OVERSEAS_TERRITORIES_ZH}`\r\n                    ? region.replace(`${str.UK_ZH}${str.OVERSEAS_TERRITORIES_ZH}`, '')\r\n                    : `${str.UK_ZH}${str.OVERSEAS_TERRITORIES_ZH}`\r\n            region =\r\n                region !== `${str.UK_ZH}${str.CROWN_DEPENDENCIES_ZH}`\r\n                    ? region.replace(`${str.UK_ZH}${str.CROWN_DEPENDENCIES_ZH}`, '')\r\n                    : `${str.UK_ZH}${str.CROWN_DEPENDENCIES_ZH}`\r\n\r\n            return region\r\n        } else {\r\n            if (data == null) return\r\n            let englishRegion = [ ...Array(currentRegion.length).keys() ]\r\n                .map((i) => currentRegion.slice(0, i + 1))\r\n                .map((regionList) => getDataFromRegion(data, regionList).ENGLISH)\r\n            englishRegion = [ ...new Set(englishRegion) ]\r\n            region = englishRegion.reverse().join(', ')\r\n\r\n            // China\r\n            region = region !== str.CHINA_EN ? region.replace(`, ${str.CHINA_EN}`, '') : str.CHINA_EN\r\n            region =\r\n                region !== str.MAINLAND_CHINA_EN\r\n                    ? region.replace(`, ${str.MAINLAND_CHINA_EN}`, '')\r\n                    : str.MAINLAND_CHINA_EN\r\n\r\n            // France\r\n            region =\r\n                region !== `${str.METRO_FRANCE_EN}, ${str.FRANCE_EN}`\r\n                    ? region.replace(`, ${str.METRO_FRANCE_EN}`, '')\r\n                    : str.METRO_FRANCE_EN\r\n            region =\r\n                region !== `${str.OVERSEAS_FRANCE_EN}, ${str.FRANCE_EN}`\r\n                    ? region.replace(`, ${str.OVERSEAS_FRANCE_EN}, ${str.FRANCE_EN}`, '')\r\n                    : str.OVERSEAS_FRANCE_EN\r\n\r\n            // Cruise ship\r\n            region =\r\n                region !== str.INTL_CONVEYANCE_EN\r\n                    ? region.replace(`, ${str.INTL_CONVEYANCE_EN}`, '')\r\n                    : str.INTL_CONVEYANCE_EN\r\n\r\n            // USA\r\n            region = region !== str.US_EN ? region.replace(str.US_EN, 'US') : str.US_EN\r\n\r\n            // UK\r\n            region = region !== str.UK_EN ? region.replace(str.UK_EN, 'UK') : str.UK_EN\r\n            region =\r\n                region !== `${str.OVERSEAS_TERRITORIES_EN}, ${str.UK_ABBR_EN}`\r\n                    ? region.replace(`, ${str.OVERSEAS_TERRITORIES_EN}, ${str.UK_ABBR_EN}`, '')\r\n                    : str.OVERSEAS_TERRITORIES_EN\r\n            region =\r\n                region !== `${str.CROWN_DEPENDENCIES_EN}, ${str.UK_ABBR_EN}`\r\n                    ? region.replace(`, ${str.CROWN_DEPENDENCIES_EN}, ${str.UK_ABBR_EN}`, '')\r\n                    : str.CROWN_DEPENDENCIES_EN\r\n\r\n            return region\r\n        }\r\n    }\r\n\r\n    displayDate = () => {\r\n        const { lang, date } = this.props\r\n        return formatDate(date, lang)\r\n    }\r\n\r\n    showTooltip = () => {\r\n        // show tooltip only when text is overflow\r\n        const elem = document.querySelector(`.current-region div`)\r\n        if (elem == null) return true\r\n        return elem.offsetWidth === elem.scrollWidth\r\n    }\r\n\r\n    render() {\r\n        const { isOpen, value, countryOnly } = this.state\r\n        if (this.props.data == null) return\r\n\r\n        const MoreIcon = countryOnly ? GoUnfold : GoFold\r\n\r\n        return (\r\n            <div className=\"current-region-wrap\">\r\n                <RegionDropdown\r\n                    isOpen={isOpen}\r\n                    onClose={this.toggleOpen}\r\n                    target={\r\n                        <div className=\"current-region\" onClick={this.toggleOpen}>\r\n                            <div\r\n                                data-tip={this.displayRegionName()}\r\n                                data-tip-disable={this.showTooltip()}\r\n                                data-place={'bottom'}\r\n                            >\r\n                                {this.displayRegionName()}\r\n                            </div>\r\n                            <GoSearch size={18} className=\"dropdown-arrow\" style={{ transform: 'translateY(1px)' }} />\r\n                        </div>\r\n                    }\r\n                >\r\n                    <Select\r\n                        classNamePrefix={'region-select'}\r\n                        autoFocus\r\n                        backspaceRemovesValue={false}\r\n                        components={{\r\n                            DropdownIndicator: () => (\r\n                                <span\r\n                                    className=\"region-select-more\"\r\n                                    onMouseUp={this.toggleCountryOnly}\r\n                                    onTouchEnd={this.toggleCountryOnly}\r\n                                    onMouseEnter={() => this.props.ReactTooltip.show(this.regionSelectMore)}\r\n                                    onMouseLeave={() => this.props.ReactTooltip.hide(this.regionSelectMore)}\r\n                                    ref={(ref) => (this.regionSelectMore = ref)}\r\n                                    data-tip={\r\n                                        countryOnly ? (\r\n                                            i18n.MORE_REGIONS_HELP_TEXT[this.props.lang]\r\n                                        ) : (\r\n                                            i18n.LESS_REGIONS_HELP_TEXT[this.props.lang]\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    <MoreIcon\r\n                                        size={16}\r\n                                        color={\r\n                                            this.props.darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)'\r\n                                        }\r\n                                    />\r\n                                </span>\r\n                            ),\r\n                            IndicatorSeparator: null\r\n                        }}\r\n                        controlShouldRenderValue={false}\r\n                        hideSelectedOptions={false}\r\n                        isClearable={false}\r\n                        menuIsOpen\r\n                        onChange={this.onSelectChange}\r\n                        options={this.state.options}\r\n                        placeholder={`${i18n.SEARCH[this.props.lang]} ...... `}\r\n                        styles={this.props.darkMode ? selectStylesDark : selectStyles}\r\n                        tabSelectsValue={false}\r\n                        value={value}\r\n                        noOptionsMessage={() => i18n.NO_RESULT[this.props.lang]}\r\n                    />\r\n                </RegionDropdown>\r\n                <div className=\"current-date\">{this.displayDate()}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Graph } from 'react-d3-graph'\r\nimport { scaleSequential, scaleLog, scaleLinear } from 'd3-scale'\r\nimport { interpolateMagma } from 'd3-scale-chromatic'\r\nimport transmissions from '../data/transmissions.yml'\r\nimport maps from '../data/maps.yml'\r\nimport { parseDate, getDataFromRegion } from '../utils/utils'\r\nimport * as str from '../utils/strings'\r\n\r\nconst CountryNode = ({ node, darkMode }) => {\r\n    return (\r\n        <div\r\n            className={`country-node ${node.selected || node.highlighted ? 'selected' : ''}`}\r\n            style={{\r\n                backgroundColor: node.selected\r\n                    ? '#fff'\r\n                    : node.color ? node.color : darkMode ? 'var(--dark-grey)' : 'var(--lighter-grey)',\r\n                fontSize: node.fontSize\r\n            }}\r\n        >\r\n            <style>\r\n                {node.selected ? (\r\n                    `#${node.id} text {font-weight: bold; font-size: 14px; }`\r\n                ) : node.highlighted ? (\r\n                    `#${node.id} text {font-size: 9px; }`\r\n                ) : (\r\n                    `#${node.id} text {font-size: ${node.labelFontSize}px;}`\r\n                )}\r\n                {`.country-node.selected,.country-node:hover { border: solid ${node.strokeWidth}px ${darkMode\r\n                    ? 'var(--primary-color-4)'\r\n                    : 'var(--primary-color-5)'};}`}\r\n            </style>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default class TransmissionNetwork extends Component {\r\n    getRegion = (id) => {\r\n        const region = [ str.MAINLAND_CHINA_ZH, str.HONGKONG_ZH, str.MACAO_ZH, str.TAIWAN_ZH ].includes(id)\r\n            ? [ str.CHINA_ZH, id ]\r\n            : id === str.DIAMOND_PRINCESS_ZH ? [ str.INTL_CONVEYANCE_ZH, str.DIAMOND_PRINCESS_ZH ] : [ id ]\r\n\r\n        return region\r\n    }\r\n\r\n    getCount = (id) => {\r\n        const { data, date, metric } = this.props\r\n        const regionData = getDataFromRegion(data, this.getRegion(id))\r\n        const count = regionData[metric][date] ? regionData[metric][date] : 0\r\n\r\n        return count\r\n    }\r\n\r\n    getColor = (id, darkMode) => {\r\n        const count = this.getCount(id)\r\n        const currentScale = this.getScale()\r\n        const colorConvert = (x) => (darkMode ? x * 0.95 + 0.05 : 0.95 - x * 0.95)\r\n        const colorScale = scaleSequential((d) => interpolateMagma(colorConvert(currentScale(d))))\r\n\r\n        return colorScale(count)\r\n    }\r\n\r\n    getScale = () => {\r\n        const { scale, metric } = this.props\r\n        const currentScale = scale === 'linear' ? scaleLinear : scaleLog\r\n        return currentScale().domain([ 1, maps[str.TRANSMISSION][`maxScale_${metric}`] ])\r\n    }\r\n\r\n    getDisplayName = (id) => {\r\n        const { lang, data } = this.props\r\n        return lang === 'zh' ? id : getDataFromRegion(data, this.getRegion(id)).ENGLISH\r\n    }\r\n\r\n    render() {\r\n        const { mapDimensions, date, regionToggle, currentRegion, currentMap, darkMode } = this.props\r\n\r\n        if (currentMap !== str.TRANSMISSION) return <div />\r\n\r\n        const networkConfig = {\r\n            directed: true,\r\n            automaticRearrangeAfterDropNode: true,\r\n            panAndZoom: true,\r\n            minZoom: 0.75,\r\n            maxZoom: 2,\r\n            focusAnimationDuration: 0.5,\r\n            nodeHighlightBehavior: true,\r\n            width: mapDimensions.width,\r\n            height: mapDimensions.height,\r\n            highlightOpacity: 0.2,\r\n            d3: {\r\n                gravity: -20,\r\n                linkLength: mapDimensions.width * 0.15\r\n            },\r\n            link: {\r\n                color: darkMode ? 'var(--darkest-grey)' : 'var(--lighter-grey)',\r\n                highlightColor: darkMode ? 'var(--primary-color-4)' : 'var(--primary-color-5)',\r\n                strokeWidth: 1,\r\n                mouseCursor: 'default'\r\n            },\r\n            node: {\r\n                labelProperty: 'displayName',\r\n                viewGenerator: (node) => <CountryNode node={node} darkMode={darkMode} />\r\n            }\r\n        }\r\n\r\n        let nodes = {}\r\n        transmissions.forEach((trans) => {\r\n            if (parseDate(trans.date) > parseDate(date)) return\r\n\r\n            if (trans.from in nodes) {\r\n                nodes[trans.from] += 1\r\n            } else {\r\n                nodes[trans.from] = 1\r\n            }\r\n            if (trans.to in nodes) {\r\n                nodes[trans.to] += 0\r\n            } else {\r\n                nodes[trans.to] = 0\r\n            }\r\n        })\r\n\r\n        const data = {\r\n            nodes: Object.keys(nodes).map((x) => ({\r\n                id: x,\r\n                displayName: this.getDisplayName(x),\r\n                size: Math.max(Math.min(nodes[x] * 20, 230), 150),\r\n                count: this.getCount(x),\r\n                color: this.getColor(x, darkMode),\r\n                labelFontSize: nodes[x] > 6 ? 9 : 0,\r\n                selected: currentRegion[currentRegion.length - 1] === x ? true : false\r\n            })),\r\n            links: transmissions\r\n                .filter((trans) => parseDate(trans.date) <= parseDate(date))\r\n                .map((trans) => ({ source: trans.from, target: trans.to }))\r\n        }\r\n\r\n        return (\r\n            <Graph\r\n                id=\"transmission-network\" // id is mandatory, if no id is defined rd3g will throw an error\r\n                data={data}\r\n                config={networkConfig}\r\n                onClickNode={(id) => regionToggle(this.getRegion(id))}\r\n            />\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport { AiOutlineFullscreen, AiOutlineFullscreenExit } from \"react-icons/ai\";\r\nimport Helmet from \"react-helmet\";\r\nimport Measure from \"react-measure\";\r\nimport \"./App.css\";\r\nimport Map from \"./Map\";\r\nimport MapNavBar from \"./MapNavBar\";\r\nimport DateSlider from \"./DateSlider\";\r\nimport AnimationController from \"./AnimationController\";\r\nimport MainCounts from \"./MainCounts\";\r\nimport Plot from \"./Plot\";\r\nimport Tree from \"./Tree\";\r\nimport NavBar from \"./NavBar\";\r\nimport Loading from \"./Loading\";\r\nimport Footer from \"./Footer\";\r\nimport Region from \"./Region\";\r\nimport TransmissionNetwork from \"./TransmissionNetwork\";\r\nimport { ReactComponent as Icon } from \"../covid19.svg\";\r\nimport i18n from \"../data/i18n.yml\";\r\nimport us_map from \"../data/us_map.yml\";\r\nimport * as str from \"../utils/strings\";\r\nimport { updateDarkMode, isoDate } from \"../utils/utils\";\r\nimport { mapText } from \"../utils/map_text\";\r\n\r\nconst defaultState = {\r\n  currentMap: \"WORLD\",\r\n  metric: \"confirmedCount\",\r\n  currentRegion: [str.GLOBAL_ZH],\r\n  playing: false,\r\n  scale: \"linear\",\r\n  mapZoom: 1,\r\n  fullMap: false,\r\n  fullPlot: false,\r\n  fullTree: false,\r\n};\r\n\r\nclass App extends Component {\r\n  state = {\r\n    startDate: \"2020-01-24\",\r\n    endDate: \"2020-02-14\",\r\n    date: \"2020-02-14\",\r\n    tempDate: \"2020-02-14\",\r\n    plotDates: [\"2020-01-24\", \"2020-02-14\"],\r\n    data: null,\r\n    dataLoaded: false,\r\n    lang: \"en\",\r\n    darkMode: true,\r\n    mapDimensions: {\r\n      width: -1,\r\n      height: -1,\r\n    },\r\n    fullDimensions: {\r\n      width: -1,\r\n      height: -1,\r\n    },\r\n    plotType: \"plot_basic\",\r\n    ...defaultState,\r\n  };\r\n\r\n  fetchData = () =>\r\n    fetch(\"data/all_minified.json\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        const latest = Object.keys(res[str.GLOBAL_ZH].confirmedCount).pop();\r\n        this.setState({\r\n          data: res,\r\n          dataLoaded: true,\r\n          date: latest,\r\n          tempDate: latest,\r\n          endDate: latest,\r\n          plotDates: [this.state.plotDates[0], latest],\r\n        });\r\n        this.tooltipRebuild();\r\n      });\r\n\r\n  componentDidMount() {\r\n    updateDarkMode(this.state.darkMode);\r\n    this.fetchData();\r\n    this.updateFullDimensions();\r\n    window.addEventListener(\"resize\", this.updateFullDimensions);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateFullDimensions);\r\n  }\r\n\r\n  updateFullDimensions = () => {\r\n    const width =\r\n      window.innerWidth ||\r\n      document.documentElement.clientWidth ||\r\n      document.body.clientWidth;\r\n    const height =\r\n      window.innerHeight ||\r\n      document.documentElement.clientHeight ||\r\n      document.body.clientHeight;\r\n\r\n    if (height < 750 || width < 992) {\r\n      if (this.state.fullMap) this.setState({ fullMap: false });\r\n      if (this.state.fullPlot) this.setState({ fullPlot: false });\r\n    }\r\n\r\n    this.setState({\r\n      fullDimensions: {\r\n        height: Math.min(height - 250, ((width - 200) * 3) / 4),\r\n        width: Math.min(((height - 250) * 4) / 3, width - 200),\r\n      },\r\n    });\r\n  };\r\n\r\n  reset = () =>\r\n    this.setState({\r\n      ...defaultState,\r\n      date: this.state.endDate,\r\n      tempDate: this.state.endDate,\r\n      plotDates: [this.state.startDate, this.state.endDate],\r\n    });\r\n\r\n  mapToggle = (newMap) =>\r\n    this.setState({\r\n      currentMap: newMap,\r\n      // do not reset map zoom when switching between two China maps\r\n      mapZoom:\r\n        newMap === str.WORLD_MAP || this.state.currentMap === str.WORLD_MAP\r\n          ? 1\r\n          : this.state.mapZoom,\r\n    });\r\n\r\n  metricToggle = (newMetric) => this.setState({ metric: newMetric });\r\n\r\n  regionToggle = (newRegion, mapChange = true) => {\r\n    const { currentMap } = this.state;\r\n    this.setState({ currentRegion: newRegion });\r\n    if (!mapChange) return;\r\n\r\n    if (currentMap === str.TRANSMISSION) return;\r\n\r\n    if (newRegion[0] === str.CHINA_ZH) {\r\n      if (newRegion.length >= 4) {\r\n        this.mapToggle(str.CHINA_MAP2);\r\n      } else if (newRegion.length >= 2 && newRegion[1] === str.HONGKONG_ZH) {\r\n        this.mapToggle(str.HONGKONG_MAP);\r\n      } else if (currentMap !== str.CHINA_MAP2) {\r\n        this.mapToggle(str.CHINA_MAP1);\r\n      }\r\n    } else if (newRegion[0] === str.US_ZH) {\r\n      if (newRegion.length >= 2 && newRegion[1] in us_map) {\r\n        this.mapToggle(str.US_MAP2);\r\n      } else {\r\n        this.mapToggle(str.US_MAP);\r\n      }\r\n    } else if (newRegion[0] === str.ITALY_ZH) {\r\n      if (newRegion.length >= 3) {\r\n        this.mapToggle(str.ITALY_MAP2);\r\n      } else if (currentMap !== str.ITALY_MAP2) {\r\n        this.mapToggle(str.ITALY_MAP);\r\n      }\r\n    } else if (newRegion[0] === str.INTL_CONVEYANCE_ZH) {\r\n      this.mapToggle(str.JAPAN_MAP);\r\n    } else {\r\n      let map = Object.keys(mapText).find(\r\n        (x) => mapText[x].regionName === newRegion[0]\r\n      );\r\n      map = map != null ? map : str.WORLD_MAP;\r\n      if (map === str.WORLD_MAP && currentMap === str.EUROPE_MAP)\r\n        map = str.EUROPE_MAP;\r\n      this.mapToggle(map);\r\n    }\r\n  };\r\n\r\n  playingToggle = () => this.setState({ playing: !this.state.playing });\r\n\r\n  scaleToggle = (newScale) => this.setState({ scale: newScale });\r\n\r\n  languageToggle = (lang) => this.setState({ lang });\r\n\r\n  fullMapToggle = () => {\r\n    this.setState({ fullMap: !this.state.fullMap });\r\n  };\r\n\r\n  fullPlotToggle = () => {\r\n    ReactTooltip.hide();\r\n    this.setState({ fullPlot: !this.state.fullPlot });\r\n  };\r\n\r\n  fullTreeToggle = () => {\r\n    this.setState({ fullTree: !this.state.fullTree });\r\n  };\r\n\r\n  darkModeToggle = () => {\r\n    updateDarkMode(!this.state.darkMode);\r\n    this.setState({ darkMode: !this.state.darkMode });\r\n  };\r\n\r\n  handleMapZoomChange = (newZoom) => this.setState({ mapZoom: newZoom });\r\n\r\n  handleDateChange = (newDate) =>\r\n    this.setState({ date: newDate, tempDate: newDate });\r\n\r\n  handleTempDateChange = (newDates) => {\r\n    const newDateStrings = newDates.map((x) =>\r\n      isoDate(x, this.state.endDate).slice(0, 10)\r\n    );\r\n    if (!this.state.fullPlot) {\r\n      this.setState({ tempDate: newDateStrings[0] });\r\n    } else {\r\n      this.setState({ plotDates: newDateStrings });\r\n    }\r\n  };\r\n\r\n  handlePlotTypeChange = (newType) => this.setState({ plotType: newType });\r\n\r\n  tooltipRebuild = () => ReactTooltip.rebuild();\r\n\r\n  render() {\r\n    const {\r\n      lang,\r\n      dataLoaded,\r\n      currentMap,\r\n      fullMap,\r\n      fullPlot,\r\n      fullTree,\r\n      darkMode,\r\n    } = this.state;\r\n    const fullScreenMode = fullMap\r\n      ? \"map-full\"\r\n      : fullPlot\r\n      ? \"plot-full\"\r\n      : fullTree\r\n      ? \"tree-full\"\r\n      : \"\";\r\n    const FullScreenIcon = fullMap\r\n      ? AiOutlineFullscreenExit\r\n      : AiOutlineFullscreen;\r\n\r\n    return (\r\n      <div className={`App ${darkMode ? \"dark\" : \"\"}`}>\r\n        <Helmet>\r\n          <title>{i18n.COVID19[lang]}</title>\r\n        </Helmet>\r\n        {!dataLoaded ? (\r\n          <Loading />\r\n        ) : (\r\n          <Fragment>\r\n            <Container className={`app-container ${fullScreenMode}`}>\r\n              <Row>\r\n                <Col lg={!fullMap ? 7 : 12}>\r\n                  <div className=\"header\">\r\n                    <span\r\n                      className=\"header-icon\"\r\n                      style={{ opacity: dataLoaded ? 1 : 0 }}\r\n                    >\r\n                      <Icon />\r\n                    </span>\r\n                    <span\r\n                      className=\"header-title\"\r\n                      style={{\r\n                        letterSpacing: lang === \"zh\" ? \"1px\" : \"normal\",\r\n                      }}\r\n                    >\r\n                      {i18n.COVID19[lang]}\r\n                    </span>\r\n                  </div>\r\n                  <NavBar\r\n                    {...this.state}\r\n                    scaleToggle={this.scaleToggle}\r\n                    languageToggle={this.languageToggle}\r\n                    darkModeToggle={this.darkModeToggle}\r\n                    reset={this.reset}\r\n                  />\r\n                  {!fullPlot && !fullTree && (\r\n                    <Measure\r\n                      bounds\r\n                      onResize={(contentRect) => {\r\n                        this.setState({ mapDimensions: contentRect.bounds });\r\n                      }}\r\n                    >\r\n                      {({ measureRef }) => (\r\n                        <div\r\n                          ref={measureRef}\r\n                          className=\"map\"\r\n                          style={{\r\n                            height: !fullMap\r\n                              ? (this.state.mapDimensions.width * 3) / 4\r\n                              : this.state.fullDimensions.height,\r\n                            width: !fullMap\r\n                              ? \"100%\"\r\n                              : this.state.fullDimensions.width,\r\n                          }}\r\n                        >\r\n                          {currentMap === str.TRANSMISSION && (\r\n                            <TransmissionNetwork\r\n                              {...this.state}\r\n                              regionToggle={this.regionToggle}\r\n                              tooltipRebuild={this.tooltipRebuild}\r\n                            />\r\n                          )}\r\n                          {currentMap !== str.TRANSMISSION && (\r\n                            <Map\r\n                              {...this.state}\r\n                              handleMapZoomChange={this.handleMapZoomChange}\r\n                              mapToggle={this.mapToggle}\r\n                              regionToggle={this.regionToggle}\r\n                              tooltipRebuild={this.tooltipRebuild}\r\n                            />\r\n                          )}\r\n                          <div className=\"map-full-button\">\r\n                            <FullScreenIcon\r\n                              size={fullMap ? 30 : 20}\r\n                              onClick={this.fullMapToggle}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </Measure>\r\n                  )}\r\n                  <MapNavBar\r\n                    {...this.state}\r\n                    mapToggle={this.mapToggle}\r\n                    metricToggle={this.metricToggle}\r\n                    regionToggle={this.regionToggle}\r\n                  />\r\n                  <DateSlider\r\n                    {...this.state}\r\n                    handleDateChange={this.handleDateChange}\r\n                    handleTempDateChange={this.handleTempDateChange}\r\n                  />\r\n                  <AnimationController\r\n                    {...this.state}\r\n                    handleDateChange={this.handleDateChange}\r\n                    playingToggle={this.playingToggle}\r\n                  />\r\n                  <div className=\"footer-white\" />\r\n                </Col>\r\n                {!fullMap && (\r\n                  <Col\r\n                    lg={!fullPlot && !fullTree ? 5 : 12}\r\n                    className=\"col-right\"\r\n                  >\r\n                    <Row\r\n                      style={{\r\n                        display: \"flex\",\r\n                        flexDirection: \"column\",\r\n                        padding: 10,\r\n                      }}\r\n                    >\r\n                      <Region\r\n                        {...this.state}\r\n                        regionToggle={this.regionToggle}\r\n                        ReactTooltip={ReactTooltip}\r\n                      />\r\n                      <MainCounts {...this.state} />\r\n                      <Plot\r\n                        {...this.state}\r\n                        regionToggle={this.regionToggle}\r\n                        fullPlotToggle={this.fullPlotToggle}\r\n                        scaleToggle={this.scaleToggle}\r\n                        handlePlotTypeChange={this.handlePlotTypeChange}\r\n                      />\r\n                      <Tree\r\n                        {...this.state}\r\n                        regionToggle={this.regionToggle}\r\n                        fullTreeToggle={this.fullTreeToggle}\r\n                      />\r\n                      <div className=\"footer-placeholder\" />\r\n                    </Row>\r\n                  </Col>\r\n                )}\r\n              </Row>\r\n            </Container>\r\n            {/* <Footer {...this.state} /> */}\r\n          </Fragment>\r\n        )}\r\n        <ReactTooltip\r\n          className=\"plot-tooltip\"\r\n          type={darkMode ? \"dark\" : \"light\"}\r\n          html={true}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport App from './components/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","module.exports = __webpack_public_path__ + \"static/media/us_map.db25f547.yml\";"],"sourceRoot":""}